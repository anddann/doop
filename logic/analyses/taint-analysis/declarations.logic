#include "../1-call-site-sensitive+heap/declarations.logic"
#include "../../addons/cfg-analysis/declarations.logic"

#ifdef CALLGRAPH_DEPS

/* Methods for callgraph-based analysis */

/**
 * Caller - callee edges
 *
 * ?toMethod    Edge to
 * ?fromMethod  Edge from
 */
CallGraphMethodEdge(?toMethod, ?fromMethod) ->
    MethodSignature(?toMethod),
    MethodSignature(?fromMethod).

/**
 * Transitive closure of the above
 *
 * ?toMethod    Edge to
 * ?fromMethod  Edge from
 */
CallGraphMethodTransitive(?fromMethod, ?toMethod) ->
    MethodSignature(?fromMethod),
    MethodSignature(?toMethod).

/**
 * Load-store dependency of a static field
 *
 * ?method      Dependant method
 * ?dependsOn   Dependence destination
 */
StaticFieldMethodDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Load-store dependency of an instance field
 *
 * ?method      Dependant method
 * ?dependsOn   Dependence destination
 */
InstanceFieldMethodDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Load-store dependency on an array
 *
 * ?method      Dependant method
 * ?dependsOn   Dependence destination
 */
HeapArrayMethodDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Any one of the above data dependencies
 *
 * ?method      Dependant method
 * ?dependsOn   Dependence destination
 */
MethodHeapDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Any data or call graph dependency
 *
 * ?method      Dependant method
 * ?dependsOn   Dependence destination
 */
MethodDependency(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Method that contains the initial interesting instructions
 *
 * ?initMeth    The initial instruction's method signature
 */
InterestingInitMethod(?initMeth) ->
    MethodSignature(?initMeth).

/**
 * Instructions that can possibly be influenced by the initial interesting instruction
 * Found by following the dependency transitive graph
 *
 * ?insn        Instruction that is interesting
 */
InterestingViaCG(?insn) ->
    Instruction(?insn).



#else


/* Methods for instruction-by-instruction analysis */


/**
 * AllCtxInterestingStoreHeapFld(?fld, ?heap)
 * Interesting instruction stores to object field
 * Provides optimization for InterestingLoad
 *
 * ?fld         The field that gets stored to
 * ?heap        The heap object containing the field
 */
AllCtxInterestingStoreHeapFld(?fld, ?heap) ->
    FieldSignature(?fld),
    HeapAllocation(?heap).


/**
 * LoadArrayHeapInsn(?ctx, ?insn, ?heap)
 * Instruction loads heap
 * Provides optimization for InterestingLoad
 *
 * ?ctx         The calling context in which the load happens
 * ?insn        The load instruction
 * ?heap        The heap object that can be loaded
 */
LoadArrayHeapInsn(?ctx, ?insn, ?heap) ->
    Context(?ctx),
    Instruction(?insn),
    HeapAllocation(?heap).

/**
 * Load instruction that loads interesting data
 *
 * ?ctx         The calling context in which the instruction is interesting
 * ?insn        The interesting instruction
 */
InterestingLoad(?ctx, ?insn) ->
    Instruction(?insn),
    Context(?ctx).

/**
 * Data dependency between instructions in different methods
 * Either a dependency caused by passing parameters to a method call,
 * or by returning a value from a call
 *
 * (?next depends on ?prev)
 *
 * ?nextCtx     Calling context of the destination instruction
 * ?next        Destination instruction
 * ?prevCtx     Calling context of the source instruction
 * ?prev        Data source instruction
 */
CallReturnDependency(?nextCtx, ?next, ?prevCtx, ?prev) ->
    Context(?nextCtx),
    Context(?prevCtx),
    Instruction(?next),
    Instruction(?prev).


/**
 * Instructions found to be data/control dependent on the initial interesting instructions
 *
 * ?ctx         The calling context of the interesting instruction
 * ?insn        The interesting instruction
 */
InterestingInstruction(?ctx, ?insn) ->
    Context(?ctx),
    Instruction(?insn).


/**
 * Instructions that are behind a guard and can be considered a secure sink
 * Therefore, these will never be considered interesting
 *
 * ?insn        The secure instruction
 */
SecureInstruction(?insn) ->
    Instruction(?insn).


/**
 * A conditional that begins a secure block
 * Instruction that are control dependent on this will be marked as secure
 *
 * ?insn        The secure instruction
 */
SecureInstructionInit(?insn) ->
    Instruction(?insn).


/**
 * A method that InterestingInstruction will never propagate to
 *
 * ?meth        The secure method
 */
 SecureMethod(?meth) ->
    MethodSignature(?meth).


#endif


/**
 * An instruction storing to an object's field
 *
 * ?base        The object base
 * ?fld         The field being stored
 * ?insn        The store instruction
 */
StoreFldTo(?base, ?fld, ?insn) ->
    Var(?base),
    FieldSignature(?fld),
    StoreInstanceField:Insn(?insn).

/**
 * An instruction loading from an object's field
 *
 * ?insn        The load instruction
 * ?base        The object base
 * ?fld         The field being loaded
 */
LoadFldFrom(?insn, ?base, ?fld) ->
    LoadInstanceField:Insn(?insn),
    Var(?base),
    FieldSignature(?fld).


/**
 * Instruction reads from var
 *
 * ?instruction The instruction using the var
 * ?var         The var being used
 */
InstructionUsesVar(?instruction, ?var) ->
    Instruction(?instruction),
    Var(?var).


/**
 * Instruction writes to var
 *
 * ?instruction The instruction defining the var
 * ?var         The var being defined
 */
InstructionDefinesVar(?instruction, ?var) ->
    Instruction(?instruction),
    Var(?var).


/**
 * A basic block that is a leaf in its method's CFG
 *
 * ?headInsn    The leaf basic block's first instruction
 * ?method      The method containing the basic block
 */
CFGLeaf(?headInsn, ?method) ->
    Instruction(?headInsn),
    MethodSignature(?method).

/**
 * A basic block does not dominate another one
 *
 * ?dominator   The non-dominating basic block's first instruction
 * ?insn        The first instruction of the basic block not being dominated
 */
DoesNotPostDominate(?postDomCandidate, ?insn) ->
    Instruction(?postDomCandidate),
    Instruction(?insn).

/**
 * A basic block dominates another one
 *
 * ?dominator   The dominating basic block's first instruction
 * ?insn        The first instruction of basic block being dominated
 */
PostDominates(?dominator, ?insn) ->
    Instruction(?dominator),
    Instruction(?insn).


/**
 * Intra procedural data dependency, requires SSA
 * (?next depends on ?prev)
 *
 * e.g. i=j;i=k;l=i;
 *
 * l=i depends on the i=k instruction
 *
 * ?next        Data destination instruction
 * ?prev        Data source instruction
 */
IntraProceduralDataDep(?next, ?prev) ->
    Instruction(?next),
    Instruction(?prev).


/**
 * Basic block depends on instruction
 * (all instructions in ?nextBlock basic block depend on ?prev)
 *
 * e.g. if (prev) {nextBlock}
 *
 * nextBlock's execution depends on the "if (prev)" instruction
 *
 * ?nextBlock   The dependant basic block's first instruction
 * ?prev        The instruction that the basic block depends on
 */
IntraProceduralControlDep(?nextBlock, ?prev) ->
    Instruction(?nextBlock),
    Instruction(?prev).

/**
 * Intra procedural dependency base, for dependencies such as
 * call parameters and return values
 *
 * (?next depends on ?prev)
 *
 * ?next        Data destination instruction
 * ?prev        Data source instruction
 */
IntraProceduralDependencyBase(?next, ?prev) ->
    Instruction(?next),
    Instruction(?prev).

/**
 * Intra procedural dependency - transitively closed
 * (?next depends on ?prev)
 *
 * ?prev        Data source instruction
 * ?next        Data destination instruction
 */
IntraProceduralDependency(?prev, ?next) ->
    Instruction(?prev),
    Instruction(?next).

/* Same as above, inverted for optimizing some rules */
IntraProceduralDependencyOpt(?next, ?prev) ->
    Instruction(?next),
    Instruction(?prev).


/**
 * Instructions to perform a forward slice on
 *
 * ?insn        The instruction that will be considered tha taint source
 */
InterestingInstructionInit(?insn) ->
    Instruction(?insn).
