/**************************************************************************
 *
 * Abstractions for native method invocations.
 *
 * @author Martin Bravenboer
 *
 **************************************************************************/

/**
 * A native call graph edge is an indirect invocation of a method. The
 * edge links the native method *declaration* to the Java method that
 * is indirectly invoked.
 */
NativeCallGraphEdge(?callerCtx, ?nativeMethod, ?calleeCtx, ?method) ->
  Context(?callerCtx), MethodSignature(?nativeMethod),
  Context(?calleeCtx), MethodSignature(?method).

/**
 * Methods invoked through native call graph edges are reachable.
 */
#ifdef INCLUDE_IMPLICITLY_REACHABLE_CODE
ReachableContext(?calleeCtx, ?method) <-
  NativeCallGraphEdge(_, _, ?calleeCtx, ?method).
#endif

#ifdef INCLUDE_IMPLICITLY_REACHABLE_CODE
RecordImmutableMacro(?ctx, ?argsArray, ?hctx),
VarPointsTo(?hctx, ?argsArray, ?ctx, ?args),
ArrayIndexPointsTo(?hctx, ?argHeap, ?hctx, ?argsArray) <-
  MainClass(?mainClass),
  MethodSignature:Type[?mainMethod] = ?mainClass,
  ReachableContext(?ctx, ?mainMethod),
  MethodSignature:Descriptor[?mainMethod] = "void(java.lang.String[])",
  FormalParam[0, ?mainMethod] = ?args,
  MainMethodArgsArray(?argsArray),
  MainMethodArgHeap(?argHeap).
#endif