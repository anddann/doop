#
#This is the skeleton of a doop properties file.
#Notes:
#- all file paths, if not absolute, should be relative to the directory that contains this file.
#- all booleans are processed using the java.lang.Boolean.parseBoolean() conventions.
#- all empty properties are ignored.
#

#
#analysis (string)
#The name of the analysis.
#
analysis =

#
#id (string)
#The id of the analysis (if not specified, the id will be created automatically). Permitted characters include letters, digits, '_', '-'.
#
id =

#
#jar (file)
#The jar files to analyze. Separate multiple jars with a space.  If the argument is a directory, all its *.jar files will be included.
#
jar =

#
#level (string)
#Set the log level: debug, info or error (default: info).
#
level =

#
#timeout (number)
#The analysis execution timeout in minutes (default: 180 - 3 hours).
#
timeout =

#
#app_regex (string)
#A regex expression for the Java package names to be analyzed. 
#
app_regex = 

#
#cache (boolean)
#The analysis will use the cached facts, if they exist. 
#
cache = 

#
#dacapo (boolean)
#Load additional logic for DaCapo (2006) benchmarks properties. 
#
dacapo = 

#
#dacapo_bach (boolean)
#Load additional logic for DaCapo (Bach) benchmarks properties. 
#
dacapo_bach = 

#
#disable_merge_exceptions (boolean)
#
disable_merge_exceptions = 

#
#disable_precise_exceptions (boolean)
#
disable_precise_exceptions = 

#
#distinguish_all_string_constants (boolean)
#
distinguish_all_string_constants = 

#
#distinguish_no_string_constants (boolean)
#
distinguish_no_string_constants = 

#
#distinguish_reflection_only_string_constants (boolean)
#
distinguish_reflection_only_string_constants = 

#
#dynamic (file)
#File with tab-separated data for Config:DynamicClass. Separate multiple files with a space. 
#
dynamic = 

#
#enable_reflection (boolean)
#Enable logic for handling Java reflection. 
#
enable_reflection = 

#
#enable_reflection_classic (boolean)
#Enable (classic subset of) logic for handling Java reflection. 
#
enable_reflection_classic = 

#
#exceptions_cs (boolean)
#
exceptions_cs = 

#
#exceptions_experimental (boolean)
#
exceptions_experimental = 

#
#exceptions_filter (boolean)
#
exceptions_filter = 

#
#exceptions_imprecise (boolean)
#
exceptions_imprecise = 

#
#exceptions_order (boolean)
#
exceptions_order = 

#
#exceptions_range (boolean)
#
exceptions_range = 

#
#externals (boolean)
#The path to doop externals (directory with different jre versions). 
#
externals = 

#
#fu_exception_flow (boolean)
#
fu_exception_flow = 

#
#include_implicitly_reachable_code (boolean)
#
include_implicitly_reachable_code = 

#
#jre (string)
#One of 1.3, 1.4, 1.5, 1.6, 1.7, system (default: system). 
#
jre = 

#
#logicblox_home (string)
#set the path to LogicBlox home (default: the value of the LOGICBLOX_HOME environment variable). 
#
logicblox_home = 

#
#main_class (string)
#Specify the main class. 
#
main_class = 

#
#may_pre_analysis (string)
#Use a may analysis before running the must analysis. 
#
may_pre_analysis = 

#
#merge_string_buffers (boolean)
#
merge_string_buffers = 

#
#only_application_classes_fact_gen (boolean)
#
only_application_classes_fact_gen = 

#
#paddle_compat (boolean)
#
paddle_compat = 

#
#reflection_context_sensitivity (boolean)
#
reflection_context_sensitivity = 

#
#reflection_invent_unknown_objects (boolean)
#
reflection_invent_unknown_objects = 

#
#reflection_merge_member_constants (boolean)
#
reflection_merge_member_constants = 

#
#reflection_refined_objects (boolean)
#
reflection_refined_objects = 

#
#reflection_string_flow_analysis (boolean)
#
reflection_string_flow_analysis = 

#
#reflection_substring_analysis (boolean)
#
reflection_substring_analysis = 

#
#reflection_use_based_analysis (boolean)
#
reflection_use_based_analysis = 

#
#run_averroes (boolean)
#Run averroes to create a placeholder library. 
#
run_averroes = 

#
#run_jphantom (boolean)
#Run jphantom for non-existent referenced jars. 
#
run_jphantom = 

#
#sanity (boolean)
#Load additional logic for sanity checks. 
#
sanity = 

#
#ssa (boolean)
#Use ssa transformation for input. 
#
ssa = 

#
#tamiflex (file)
#Use file with tamiflex data for reflection. 
#
tamiflex = 

#
#transform_input (boolean)
#Transform input by removing redundant instructions. 
#
transform_input = 

#
#use_original_names (boolean)
#
use_original_names = 

#
#x_only_facts (file)
#Only generate facts and exit. 
#
x_only_facts = 

#
#x_soot_version (string)
#One of 2.5.0, 2.5.0-custom (default: 2.5.0). 
#
x_soot_version = 

#
#x_stats_full (boolean)
#Load additional logic for collecting statistics. 
#
x_stats_full = 

#
#x_stats_none (boolean)
#Do not load logic for collecting statistics. 
#
x_stats_none = 

