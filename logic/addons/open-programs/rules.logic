FormalParamOpt(?index, ?method, ?formal) <- FormalParam[?index, ?method] = ?formal.

ServletEntryMethodName("doGet").
ServletEntryMethodName("doPost").

AllConcreteImplementations(?class, ?staticType) <-
   SubtypeOf(?class, ?staticType),
   ClassType(?class),
   !ClassModifier("abstract", ?class).

ConcreteImplementations[?staticType] = ?class <-
   agg << ?class = min(?allClasses) >> AllConcreteImplementations(?allClasses, ?staticType).

AnyConcreteImplementations(?class, ?staticType) <-
   ConcreteImplementations[?staticType] = ?class.
   
ServletClass(?class) <-
   AllConcreteImplementations(?class, ?staticType),
   ClassType(?class),
   Type:Value(?staticType:"javax.servlet.http.HttpServlet").

        
MockObject(?classHeap, ?class) <-
   ClassType(?class),
   !ClassModifier("abstract", ?class),
   Type:Value(?class:?classStr),
   ?classHeap = "<Mock allocation for " + ?classStr + ">".

                    
FieldInformation(?signature, ?fieldtype, ?class) ->
   Field(?signature), Type(?fieldtype), Type(?class).

FieldInformation(?signature, ?fieldtype, ?class) <-
   Field:Type[?signature] = ?fieldtype,
   Field:DeclaringType[?signature] = ?class.

FieldInformation(?signature, ?fieldtype, ?class) <-
   FieldInformation(?signature, ?fieldtype, ?staticType),
   AnyConcreteImplementations(?class, ?staticType).

FieldInformation(?signature, ?fieldConcreteType, ?class) <-
   FieldInformation(?signature, ?fieldStaticType, ?class),
   AnyConcreteImplementations(?fieldConcreteType, ?fieldStaticType).
   
MockHeapForField(?signature, ?baseheap, ?fieldtype) ->
   Field(?signature), Type(?fieldtype), HeapAllocation(?baseheap).

MockHeapForField(?signature, ?baseheap, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class),
   MockObjectHeap(?baseheap, ?class).

MockObjectHeap(?heap, ?fieldtype) -> HeapAllocation(?heap), Type(?fieldtype).

MockObjectOpt(?fieldtype, ?heap) <- MockObject(?heap, ?fieldtype).

MockObjectHeap(?heap, ?fieldtype) <-
   MockObjectOpt(?fieldtype, ?heapStr),
   Instruction:Value(?heap:?heapStr), 
   HeapAllocation(?heap).

Blah(?heap, ?signature, ?baseheap),
InstanceFieldPointsTo(?hctx, ?heap, ?signature, ?hctx, ?baseheap) <-
   ImmutableHContext[] = ?hctx,
   MockHeapForField(?signature, ?baseheap, ?fieldtype),
   MockObjectHeap(?heap, ?fieldtype).

ImplicitReachable(?method) <- MockEntryPoint(_, ?method).

GetMocksForFormals(?description, ?subtype, ?index, ?method) <-
   FormalParam[?index, ?method] = ?formal,
   Var:Type[?formal] = ?staticType,
   AnyConcreteImplementations(?subtype, ?staticType),
   Method:Value(?method:?methodStr),
   MockEntryPoint(_, ?method),
   // TODO: replace with ClassTypeValue macro
   Type:Value(?subtype:?subtypeStr), 
   ?description = "<Mock " + ?methodStr + ": " + ?subtypeStr + ">".

// Servlet service methods
MockEntryPoint(?class, ?entry) <-
   ServletClass(?class),
   Type:Value(?class:?classStr),
   ServletEntryMethodName(?serviceMethodName),
   Method:Value(?entry:methodSigStr),
   (methodSigStr = "<" + ?classStr +": void <init>()>" ; methodSigStr = "<" + ?classStr + ": void " + ?serviceMethodName +"(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>"),
   ServletEntryMethodName(?serviceMethodName).

// bind mock objects to formals

HeapIdForFormalInContext(?ctx, ?formal, ?heapStr) <-
   GetMocksForFormals(?heapStr, _, ?index, ?method),
   ReachableContext(?ctx, ?method),
   FormalParam[?index, ?method] = ?formal.

VarPointsTo(?hctx, ?heap, ?ctx, ?formal)
 <-
   HeapIdForFormalInContext(?ctx, ?formal, ?heapStr),
   Instruction:Value(?heap:?heapStr), 
   ImmutableHContext[] = ?hctx,
   HeapAllocation(?heap).

// bind mock objects to receivers
HeapForReceiverInContext(?ctx, ?receiver, ?heapStr) <-
   ReachableContext(?ctx, ?method),
   ThisVar[?method] = ?receiver,
   Method:DeclaringType[?method] = ?class,
   MockObjectHeap(?heapStr, ?class).
   
VarPointsTo(?hctx, ?heap, ?ctx, ?receiver)
 <-
   ImmutableHContext[] = ?hctx,
//   MockObject(?heapStr, _), //TODO indexing
   HeapForReceiverInContext(?ctx, ?receiver, ?heap).
