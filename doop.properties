#
#This is the skeleton of a doop properties file.
#Notes:
#- all file paths, if not absolute, should be given relative to the directory that
#  doop is invoked from (and not relative to the directory this file is located).
#- all booleans are processed using the java.lang.Boolean.parseBoolean() conventions.
#- all empty properties are ignored.
#

#
#analysis (string)
#The name of the analysis.
#
analysis =

#
#id (string)
#The id of the analysis (if not specified, the id will be created automatically). Permitted characters include letters, digits, '_', '-'.
#
id =

#
#jar (file)
#The jar files to analyze. Separate multiple jars with a comma.  If the argument is a directory, all its *.jar files will be  included.
#
jar =

#
#level (string)
#Set the log level: debug, info or error (default: info).
#
level =

#
#timeout (number)
#The analysis execution timeout in minutes (default: 180 - 3 hours).
#
timeout =

#
#allow_phantom (boolean)
#Allow non-existent referenced jars. 
#
allow_phantom = 

#
#app_regex (string)
#A regex expression for the Java package names to be analyzed. 
#
app_regex = 

#
#averroes (boolean)
#Use averroes tool to create a placeholder library. 
#
averroes = 

#
#cache (boolean)
#The analysis will use the cached input relations, if such exist. 
#
cache = 

#
#client_code (file)
#Additional directory/file of client analysis to include. 
#
client_code = 

#
#dynamic (file)
#File with tab-separated data for Config:DynamicClass. Separate multiple files with a comma. 
#
dynamic = 

#
#jre (string)
#One of 1.3, 1.4, 1.5, 1.6, 1.7, system (default: system). 
#
jre = 

#
#main_class (string)
#Specify the main class. 
#
main_class = 

#
#may_pre_analysis (string)
#Use a may analysis before running the must analysis. 
#
may_pre_analysis = 

#
#sanity (boolean)
#Load additional logic for sanity checks. 
#
sanity = 

#
#solo (boolean)
#
solo = 

#
#ssa (boolean)
#Use ssa transformation for input. 
#
ssa = 

#
#stats (boolean)
#Load additional logic for collecting statistics. 
#
stats = 

#
#tamiflex (file)
#File with tamiflex data. 
#
tamiflex = 

#
#analyze_reflection_substrings (boolean)
#
analyze_reflection_substrings = 

#
#client_exception_flow (boolean)
#
client_exception_flow = 

#
#context_sensitive_reflection (boolean)
#
context_sensitive_reflection = 

#
#dacapo (boolean)
#
dacapo = 

#
#dacapo_bach (boolean)
#
dacapo_bach = 

#
#disable_merge_exceptions (boolean)
#
disable_merge_exceptions = 

#
#disable_precise_exceptions (boolean)
#
disable_precise_exceptions = 

#
#disable_reflection (boolean)
#
disable_reflection = 

#
#distinguish_all_string_constants (boolean)
#
distinguish_all_string_constants = 

#
#distinguish_no_string_constants (boolean)
#
distinguish_no_string_constants = 

#
#distinguish_reflection_string_constants (boolean)
#
distinguish_reflection_string_constants = 

#
#exceptions_cs (boolean)
#
exceptions_cs = 

#
#exceptions_experimental (boolean)
#
exceptions_experimental = 

#
#exceptions_filter (boolean)
#
exceptions_filter = 

#
#exceptions_imprecise (boolean)
#
exceptions_imprecise = 

#
#exceptions_order (boolean)
#
exceptions_order = 

#
#exceptions_range (boolean)
#
exceptions_range = 

#
#include_implicitly_reachable_code (boolean)
#
include_implicitly_reachable_code = 

#
#incremental (boolean)
#
incremental = 

#
#invent_unknown_reflective_objects (boolean)
#
invent_unknown_reflective_objects = 

#
#logicblox_home (string)
#set the path to LogicBlox home (default: the value of the LOGICBLOX_HOME environment variable). 
#
logicblox_home = 

#
#memlog (boolean)
#
memlog = 

#
#merge_field_and_method_substrings (boolean)
#
merge_field_and_method_substrings = 

#
#merge_string_buffers (boolean)
#
merge_string_buffers = 

#
#no_context_repeat (boolean)
#
no_context_repeat = 

#
#paddle_compat (boolean)
#
paddle_compat = 

#
#refined_reflection_objects (boolean)
#
refined_reflection_objects = 

#
#reflection_string_flow_analysis (boolean)
#
reflection_string_flow_analysis = 

#
#transform_input (boolean)
#Transform input by removing redundant instructions. 
#
transform_input = 

#
#use_based_reflection_analysis (boolean)
#
use_based_reflection_analysis = 

#
#use_java_cpp (boolean)
#Use a full-java preprocessor for the logic files. 
#
use_java_cpp = 

