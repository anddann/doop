/**
 * Definitions of sources and sinks
 */

// TODO: use a richer language for sources
TaintSourceMethod(?method) <-
  MethodSignature:SimpleName[?method] = "readLine".

// TODO: use a richer language for sinks
LeakingSinkMethod(0, ?method) <-
  MethodSignature:SimpleName[?method] = "println".

/**
 * Information flow through primitive operations
 */

// when a tainted variable is "used" by primitive operations
// the output of the primitive operations is also tainted

//VarIsTaintedFrom(?to, ?from) <-
//  VarDef(?to, ?insn),
//  VarUse(?from, ?insn).

//VarDef(?to, ?insn) <-
//  AssignInstruction:To[?insn] = ?to,
//  (AssignBinop:Insn(?insn) ; AssignUnop:Insn(?insn)).

VarUse(?from, ?insn) <- AssignOper:From(?insn, ?from).

VarPointsTo(?hctx, ?heap, ?toCtx, ?to) <-
  VarIsTaintedFrom(?toCtx, ?to, ?fromCtx, ?from),
  TaintedHeapAllocation(?heap),
  VarPointsTo(?hctx, ?heap, ?fromCtx, ?from).

CallTaintingMethod(?ctx, ?invocation) <-
  TaintSourceMethod(?tomethod),
  CallGraphEdge(?ctx, ?invocation, _, ?tomethod).


/**
 * String operations
 */
StringFactoryType(?type) <-
  Type:fqn(?type:"java.lang.StringBuffer") ;
  Type:fqn(?type:"java.lang.StringBuilder").

StringFactoryVar(?var) <-
  Var:Type[?var] = ?type,
  StringFactoryType(?type).

StringFactoryVarPointsTo(?factoryHctx, ?factoryHeap, ?ctx, ?var) <-
  VarPointsTo(?factoryHctx, ?factoryHeap, ?ctx, ?var),
  StringFactoryVar(?var).

VarIsTaintedFrom(?ctx, ?ret, ?ctx, ?param) <-
  VirtualMethodInvocation:SimpleName[?invocation] = "append",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  ActualParam[0, ?invocation] = ?param,
  AssignReturnValue[?invocation] = ?ret.

VarIsTaintedFrom(?ctx, ?ret, ?ctx, ?base) <-
  VirtualMethodInvocation:SimpleName[?invocation] = "toString",
  VirtualMethodInvocation:Base[?invocation] = ?base,
  StringFactoryVarPointsTo(_, _, ?ctx, ?base),
  AssignReturnValue[?invocation] = ?ret.

/**
 * Sanitisation
 */
//SanitisationMethod(?method) <-
//  MethodSignature:SimpleName[?method] = "sanitize".

//CallSanitisationMethod(?ctx, ?invocation) <-
//  Sanitisation(?tomethod),
//  CallGraphEdge(?ctx, ?invocation, _, ?tomethod).


/**
 * Sinks and leaks
 */
LeakingSinkVariable(?invocation, ?ctx, ?var) <-
  CallGraphEdge(?ctx, ?invocation, _, ?tomethod),
  LeakingSinkMethod(?index, ?tomethod),
  ActualParam[?index, ?invocation] = ?var.

LeakingTaintedInformation(?ctx, ?invocation, ?hctx, ?obj) <-
  VarPointsTo(?hctx, ?obj, ?ctx, ?var),
  TaintedHeapAllocation(?obj),  
  LeakingSinkVariable(?invocation, ?ctx, ?var).

/**
 * Special Heap allocation on function call
 */

RecordMacro(?callerCtx, ?invocation, ?hctx),
TaintedObject(?hctx, ?invocation),
VarPointsTo(?hctx, ?invocation, ?callerCtx, ?to) <-
  CallTaintingMethod(?callerCtx, ?invocation),
  TaintedHeapAllocation(?invocation),
//  !SanitizedHeap(?invocation).
  AssignReturnValue[?invocation] = ?to.
