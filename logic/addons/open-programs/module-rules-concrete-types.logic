#include "module-entry-points.logic"


FormalParamOpt(?index, ?method, ?formal) <- FormalParam[?index, ?method] = ?formal.

AllConcreteImplementations(?class, ?staticType) <-
   SubtypeOf(?class, ?staticType),
   ClassType(?class),
   !ClassModifier("abstract", ?class).

AllConcreteImplementations(?class, ?class) <-
   ClassType(?class),
   !ClassModifier("abstract", ?class).

AllConcreteImplementations(?type, ?type) <-
   ArrayType(?type).

ConcreteType(?type) <- AllConcreteImplementations(?type, _).

ObjToMock(?class) -> ReferenceType(?class).

MockObjFromEntryPoint(?class),
ObjToMock(?class) <-
   EntryPoint(?method),
   Method:DeclaringType[?method] = ?class,
   !ClassModifier("abstract", ?class),
   ReferenceType(?class).

MockObjFromArray(?class),
ObjToMock(?class) <-
   ObjToMock(?type),
   ArrayType(?type),
   ComponentType[?type] = ?componentType,
   StaticToActualType(?class, ?componentType).


MockObjFromField(?fieldType) -> ReferenceType(?fieldType).

#ifdef MOCK_OBJECTS_FOR_FIELDS
MockObjFromField(?fieldType),
ObjToMock(?fieldType) <-
   FieldInformationOpt(_, ?class, ?fieldType),
   !ClassModifier("abstract", ?fieldType),
   ReferenceType(?fieldType),
   ObjToMock(?class).

FieldInformation(?signature, ?fieldtype, ?class) ->
   Field(?signature), Type(?fieldtype), Type(?class).

FieldInformation(?signature, ?fieldtype, ?class) <-
   Field:Type[?signature] = ?fieldtype,
   Field:DeclaringType[?signature] = ?class.

FieldInformation(?signature, ?fieldtype, ?class) <-
   FieldInformation(?signature, ?fieldtype, ?staticType),
   AllConcreteImplementations(?class, ?staticType).

FieldInformation(?signature, ?fieldConcreteType, ?class) <-
   FieldInformationOpt(?signature, ?class, ?fieldStaticType),
   StaticToActualType(?fieldConcreteType, ?fieldStaticType).

FieldInformationOpt(?signature, ?class, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class).

FieldTypeForMockObject(?signature, ?basevalue, ?fieldtype) ->
   Field(?signature), Type(?fieldtype), Value(?basevalue).

FieldTypeForMockObject(?signature, ?basevalue, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class),
   MockObject(?basevalue, ?class).

InstanceFieldPointsTo(?hctx, ?value, ?signature, ?hctx, ?basevalue) <-
   ImmutableHContext(?hctx), //TODO: hctx
   FieldTypeForMockObject(?signature, ?basevalue, ?fieldtype),
   MockObjectForType(?value, ?fieldtype).
#endif


// Arrays
StaticToActualTypeOpt(?staticType, ?class) <- StaticToActualType(?class, ?staticType).

MockObjectForType(?value, ?staticType) <-
   MockObject(?value, ?class),
   StaticToActualTypeOpt(?staticType, ?class).

ComponentTypeOpt(?arrayType, ?componentType) <-
   ComponentType[?arrayType] = ?componentType.

MockObjectForComponentType(?value, ?arrayType) <-
   ComponentTypeOpt(?arrayType, ?componentType),
   MockObjectForType(?value, ?componentType).

ArrayIndexPointsTo(?hctx, ?componentValue, ?hctx, ?arrayValue) <-
   MockObjectContext(?hctx, ?arrayValue, ?arrayType),
   ArrayType(?arrayType),
   MockObjectForComponentType(?componentValue, ?arrayType).
// *****************
// Formal parameters
// *****************
FormalsForEntryPoints(?method, ?formal) -> Method(?method), Var(?formal).

FormalsForEntryPoints(?method, ?formal) <-
   FormalParam[_, ?method] = ?formal,
   EntryPoint(?method).


MockObjFromFormal(?subtype),
ObjToMock(?subtype),
TypeForFormals(?formal, ?method, ?subtype) <-
   FormalsForEntryPoints(?method, ?formal),
   Var:Type[?formal] = ?staticType,
   StaticToActualType(?subtype, ?staticType).



MockForFormal(?value, ?formal, ?type, ?method) <-
   TypeForFormals(?formal, ?method, ?type),
// When running a mutliple segregated analysis, we want to restrict the program
// so that we avoid data flowing from classes in different partitions.
// We should select formal parameters with this intuition in mind.
#ifdef MULTIPLE_SEGREGATED_ANALYSES
   Method:DeclaringType[?method] = ?class,
   TypeToPartitionId[?class] = TypeToPartitionId[?type],
#endif
     //FIXME: added this here
    ContextForFormal(?value, ?type).


// bind mock objects to formals
MockObjectContext(?hctx, ?value, ?class),
VarPointsTo(?hctx, ?value, ?ctx, ?formal)
 <-
   ContextForEntryPoint(?ctx, ?method),
   HContextForEntryPoint(?hctx, ?method),
   MockForFormal(?value, ?formal, ?class, ?method).

// TODO: do we need all these options?
// feel free to remove/collapse some

// receivers for entry points
HContextForEntryPoint(?hctx, ?method),
#ifndef OPEN_PROGRAMS_IMMUTABLE_HCTX
RecordMacro(?calleeCtx, ?value, ?hctx),
#endif
MockObjectContext(?hctx, ?value, ?class),
VarPointsTo(?hctx, ?value, ?calleeCtx, ?receiver) <-
#ifdef OPEN_PROGRAMS_IMMUTABLE_HCTX
   ImmutableHContextFromContext[?calleeCtx] = ?hctx,
#endif
   ReceiverPointsTo(?value, ?calleeCtx, ?receiver, ?class, ?method).



// Important: The MergeOpenProgramEntryPointMacro can be defined
// in such a way as to retreive some of the precision lost
// due to having mock objects flowing everywhere,
// see implementation in 2objH
// see scalable (but less sound) implementation in partioned-2objH

// TODO: feel free to simplify options here
ReceiverPointsTo(?value, ?calleeCtx, ?receiver, ?class, ?method),
#ifndef OPEN_PROGRAMS_IMMUTABLE_CTX
#ifdef MergeOpenProgramEntryPointMacro
MergeOpenProgramEntryPointMacro(?method, ?value, ?calleeCtx),
#else
MergeStartupMacro(?immutablehctx, ?value, ?calleeCtx),
#endif
#endif
ContextForEntryPoint(?calleeCtx, ?method)
 <-
   ThisVar[?method] = ?receiver,
   Method:DeclaringType[?method] = ?class,
//FIXME: modified this, to bind this variable of entrypoints to potential return values
   ContextForThisVar(?value, ?class),
#ifndef MergeOpenProgramEntryPointMacro
   ImmutableHContext(?immutablehctx),
   ?immutablehctx = ?immutablehctx, // avoid warning if unused
#endif
#ifdef OPEN_PROGRAMS_IMMUTABLE_CTX
   ImmutableContext(?calleeCtx),
#endif
   EntryPoint(?method).


//FIXME: modified this, to bind this variable of entrypoints to potential return values
ContextForThisVar(?value,?class)<-
    (EntryPoint(?meth), ReturnVar(?var,?meth), VarPointsTo(_,?value,_,?var), Value:Type[?value]=?class);
    MockObjectForType(?value, ?class).

//FIXME: added tis
ContextForFormal(?value,?type)<-
(EntryPoint(?meth), ReturnVar(?var,?meth), VarPointsTo(_,?value,_,?var), Value:Type[?value]=?type);
MockObject(?value, ?type).

// TODO: requires major tweaking for context sensitive analyses
// Consider a recency abstraction for context in static methods
HContextForEntryPoint(?hctx, ?method),
ContextForEntryPoint(?calleeCtx, ?method)
 <-
   ImmutableHContext(?hctx),
   ImmutableContext(?calleeCtx),
   Method:Modifier("static", ?method),
   EntryPoint(?method).


// Here we "randomly" select a concrete implementation for each type.
// In a segregated analysis we try to select one from the same partition.
ConcreteImplementations[?staticType] = ?class <-
   agg << ?class = min(?allClasses) >> (
                         #ifdef MULTIPLE_SEGREGATED_ANALYSES
                         TypeToPartitionId[?allClasses] = TypeToPartitionId[?staticType],
                         #endif
                         AllConcreteImplementations(?allClasses, ?staticType)
                      ).



//FIXME: instead of random, we select all concrete implementations

// gives us a concrete implementation of a type, preferably itself
//StaticToActualType(?class, ?staticType) <-
 //  ConcreteImplementations[?staticType] = ?class,
 //  !ConcreteType(?staticType).


// gives us a concrete implementation of a type, preferably itself
StaticToActualType(?class, ?staticType) <-
   AllConcreteImplementations(?class, ?staticType),
   !ConcreteType(?staticType) .

StaticToActualType(?type, ?type) <-
   ConcreteType(?type).


//ClassWithNoImplementation(?class) -> ClassType(?class).
//ExistsConcreteImplementation(?type) -> Type(?type).

ClassWithNoImplementation(?class) <-
ClassModuleName(MODULENAME,?class), ExportedByModule(?class),
 ClassModifier("abstract", ?class), !ExistsConcreteImplementation(?class).

ExistsConcreteImplementation(?type) <-
	ConcreteImplementations[?type]=_.


// The key point where all the mock objects are created. Triggers all the rest.
MockObject(?value, ?class),
Value:Mock:Cons[(Type:Id[(?class)]) + "::: (Mock)"] = ?value,
Value:Type[?value] = ?class,
Value(?value),
Value:DeclaringType[?value] = ?class  <-
//#ifndef OPEN_PROGRAMS
   // If we are not in open-program mode, only trigger logic if no main method exists
//   !MainMethodDeclaration(_),
//   !AndroidAppComponent(_),
//#endif
   ObjToMock(?class).



// Similar for ReachableContext. If not in open program mode, add extra conditions.
ReachableContext(?ctx, ?method) <-
//FIXME: delete this in future (or at least test, if this is the problem)
//#ifndef OPEN_PROGRAMS
   // If we are not in open-program mode, only trigger logic if no main method exists
//   !MainMethodDeclaration(_),
//   !AndroidAppComponent(_),
//#endif
   ContextForEntryPoint(?ctx, ?method).



//+Type:Id(?proxyClass:?proxyClassId),
//+ClassType(?proxyClass),
//+ProxyClass(?proxyClass),
//+ClassModifier("final", ?proxyClass),
//+DirectSuperclass[?proxyClass] = ?proxySuperclass,
//+DirectSuperinterface(?proxyClass, ?interface) <-
  //InterfaceType@previous(?interface),
 // Type:Id@previous(?interface:?interfaceId),
  //Type:Id@previous(?proxySuperclass:"java.lang.reflect.Proxy"),
  //ClassType@previous(?proxySuperclass),
  //?proxyClassId = "$Proxy$for$" + ?interfaceId.





//create concrete for abstract

DummyClass(?org,?class) -> ClassType(?org),ClassType(?class).
//+DummyClass(?org, _) <- -ClassToManage(?org).

//ClassToManage(?class) -> Type(?class).
// +ClassToManage(?class) <- ClassWithNoImplementation(?class).



//Class:Mock:Cons[?id] = ?class -> Type(?id), ClassType(?class).
//lang:constructor(`Class:Mock:Cons).


+Type:Id(?class:?proxyClassId),
+ClassType(?class),
+DummyClass(?oclass,?class),
+ClassModifier("public", ?class),
//+Class:Mock:Cons[(Type:Id[(?oclass)]) + "::: (MockConcrete)"] = ?class,
+DirectSuperclass[?class] = ?oclass
<- ClassWithNoImplementation@previous(?oclass),
    Type:Id@previous(?oclass:?interfaceId),
    ClassType@previous(?oclass),
    ExportedByModule@previous(?oclass),
 ?proxyClassId = "$Proxy$for$" + ?interfaceId.
