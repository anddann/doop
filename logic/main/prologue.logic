MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem",
   ?type = "java.io.UnixFileSystem".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "java.io.UnixFileSystem.list/new java.lang.String[]",
   ?type = "java.lang.String[]".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "java.io.UnixFileSystem.list/new java.lang.String",
   ?type = "java.lang.String".


MockupHeapConsMacro(?id, ?type, ?heap) <-
   (?id = "<<string-constant>>";
    ?id = "<<reflection-string-constant>>"),
   ?type = "java.lang.String".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<string-buffer>>",
   ?type = "java.lang.StringBuffer".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<string-builder>>",
   ?type = "java.lang.StringBuilder".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   (?id = "<<system-thread-group>>";
    ?id = "<<main-thread-group>>"),
   ?type = "java.lang.ThreadGroup".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<main-thread>>",
   ?type = "java.lang.Thread".

// Special objects for contexts
// Note: the type is necessary (java.lang.Object), but never used. It could be
// anything. It also needs to be an existing type, otherwise the sanity checks
// will barf.
MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<initial-context>>",
   ?type = "java.lang.Object".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<jvm-startup>>",
   ?type = "java.lang.Object".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<class-initialization>>",
   ?type = "java.lang.Object".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<immutable-context>>",
   ?type = "java.lang.Object".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<immutable-hcontext>>",
   ?type = "java.lang.Object".

MockupHeapConsMacro(?id, ?type, ?heap) <-
   ?id = "<<immutable>>",
   ?type = "java.lang.Object".


DeclaringClass:Allocation[?heap] = ?declType <-
   ClassTypeValue(?declType, "java.lang.System"),
   (HeapAllocation:byValue["<<string-constant>>"] = ?heap ;
    HeapAllocation:byValue["<<reflection-string-constant>>"] = ?heap ;
    HeapAllocation:byValue["<<string-buffer>>"] = ?heap ;
    HeapAllocation:byValue["<<string-builder>>"] = ?heap ;
    HeapAllocation:byValue["<<initial-context>>"] = ?heap ;
    HeapAllocation:byValue["<<jvm-startup>>"] = ?heap ;
    HeapAllocation:byValue["<<class-initialization>>"] = ?heap ;
    HeapAllocation:byValue["<<system-thread-group>>"] = ?heap ;
    HeapAllocation:byValue["<<main-thread-group>>"] = ?heap ;
    HeapAllocation:byValue["<<main-thread>>"] = ?heap ;
    HeapAllocation:byValue["<<immutable-context>>"] = ?heap ;
    HeapAllocation:byValue["<<immutable-hcontext>>"] = ?heap ;
    HeapAllocation:byValue["<<immutable>>"] = ?heap).
