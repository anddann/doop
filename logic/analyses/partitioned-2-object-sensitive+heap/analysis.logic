#include "../../main/partitioning.logic"

// Context-sensitive pointer analysis with context of 1 object and a
// context-sensitive heap abstraction.

// Some basics, for encoding-decoding
RealContext1FromContext[?ctx] = ?heap1,
RealContext2FromContext[?ctx] = ?heap2,
PartitionFromContext[?ctx] = ?partitionId <-
  ContextFromRealContext[?partitionId, ?heap1, ?heap2] = ?ctx.

RealHContextFromHContext[?hctx] = ?heap,
PartitionFromHContext[?hctx] = ?partitionId <-
  HContextFromRealHContext[?partitionId, ?heap] = ?hctx.

// Default contexts
Context(?ctx),
ContextFromRealContext[?partitionId, ?heap, ?heap] = ?ctx,
ImmutableContext(?ctx) <-
  HeapAllocation:byValue["<<immutable-context>>"] = ?heap,
  PartitionId(?partitionId).

HContext(?hctx),
HContextFromRealHContext[?partitionId, ?heap] = ?hctx,
ImmutableHContext(?hctx) <-
  HeapAllocation:byValue["<<immutable-hcontext>>"] = ?heap,
  PartitionId(?partitionId).

// horrible indexing, but there will only be a handful of such contexts
ImmutableContextFromHContext[?hctx] = ?ctx <-
  ImmutableContext(?ctx),
  PartitionFromContext[?ctx] = PartitionFromHContext[?hctx].
ImmutableContextFromContext[?ctx1] = ?ctx2 <-
  ImmutableContext(?ctx2),
  PartitionFromContext[?ctx1] = PartitionFromContext[?ctx2].
ImmutableHContextFromContext[?ctx] = ?hctx <-
  ImmutableHContext(?hctx),
  PartitionFromContext[?ctx] = PartitionFromHContext[?hctx].

// Create initial objects with their heap contexts
HContext(?hctx),
HContextFromRealHContext[?partitionId, ?heap] = ?hctx,
SystemThreadGroup(?hctx, ?alloc) <-
  HeapAllocation:byValue["<<jvm-startup>>"] = ?heap,
  HeapAllocation:byValue["<<system-thread-group>>"] = ?alloc,
  PartitionId(?partitionId).

HContext(?hctx),
HContextFromRealHContext[?partitionId, ?heap] = ?hctx,
MainThreadGroup(?hctx, ?alloc) <-
  HeapAllocation:byValue["<<jvm-startup>>"] = ?heap,
  HeapAllocation:byValue["<<main-thread-group>>"] = ?alloc,
  PartitionId(?partitionId).

HContext(?hctx),
HContextFromRealHContext[?partitionId, ?heap] = ?hctx,
MainThread(?hctx, ?alloc) <-
  HeapAllocation:byValue["<<jvm-startup>>"] = ?heap,
  HeapAllocation:byValue["<<main-thread>>"] = ?alloc,
  PartitionId(?partitionId).


// Merge optimization hack

// For this analysis, we only need three of the parameters that may influence the
// new context object.
MyMergeBasis(?invo, ?hctx, ?heap) <-
  MergeBasis(_, ?invo, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.  We also
// cache them, so they can be looked up without a join.
MergeMacro(?notused, ?notused, ?hctx, ?heap, ?calleeCtx),
OptimizeMerge[?invo, ?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?heap).

/*
MergeMacro(?notused, ?notused, ?hctx, ?heap, ?calleeCtx),
OptimizeMerge[?invo, ?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?heap),
  HeapAllocation:Type[?heap] = ?heaptype,
  InvocationInSamePartition(?invo, ?heaptype).

OptimizeMerge[?invo, ?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?invo, ?hctx, ?heap),
  HeapAllocation:Type[?heap] = ?heaptype,
  !InvocationInSamePartition(?invo, ?heaptype),
  ImmutableContext(?calleeCtx).
*/

// What are the necessary parameters for this analysis?
MyRecordBasis(?ctx, ?heap) <-
  RecordBasis(_, ?ctx, ?heap).
  
RecordMacro(?ctx, ?heap, ?hctx),
OptimizeRecord[?ctx, ?heap] = ?hctx <-
  MyRecordBasis(?ctx, ?heap).

// Initially reachable methods
Context(?ctx),
ContextFromRealContext[?partitionId, ?heap, ?heap] = ?ctx,
ReachableContext(?ctx, ?method) <-
  MainMethodDeclaration(?method),
  HeapAllocation:byValue["<<initial-context>>"] = ?heap,
  PartitionId(?partitionId).

Context(?ctx),
ContextFromRealContext[?partitionId, ?heap, ?heap] = ?ctx,
ReachableContext(?ctx, ?method) <-
  ImplicitReachable(?method),
  HeapAllocation:byValue["<<jvm-startup>>"] = ?heap,
  PartitionId(?partitionId).

Context(?ctx),
ContextFromRealContext[?partitionId, ?heap, ?heap] = ?ctx,
ReachableContext(?ctx, ?clinit) <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocation:byValue["<<class-initialization>>"] = ?heap,
  PartitionId(?partitionId).
