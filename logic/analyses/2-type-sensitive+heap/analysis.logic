// Context-sensitive pointer analysis with context of 2 types and a
// context-sensitive heap abstraction.

RealContext1FromContext[?ctx] = ?type1,
RealContext2FromContext[?ctx] = ?type2 <-
  ContextFromRealContext[?type1, ?type2] = ?ctx.

RealHContextFromHContext[?hctx] = ?type <-
  HContextFromRealHContext[?type] = ?hctx.

Context(?ctx),
ContextFromRealContext[?type, ?type] = ?ctx,
ImmutableContext[] = ?ctx <-
  Type:Value(?type, "<<immutable-context>>").

HContext(?hctx),
HContextFromRealHContext[?type] = ?hctx,
ImmutableHContext[] = ?hctx <-
  Type:Value(?type, "<<immutable-hcontext>>").


// Create initial objects with their heap contexts
HContext(?hctx),
HContextFromRealHContext[?type] = ?hctx,
SystemThreadGroup(?hctx, ?alloc) <-
  Type:Value(?type, "<<jvm-startup>>"),
  HeapAllocationValue(?alloc, "<<system-thread-group>>").

HContext(?hctx),
HContextFromRealHContext[?type] = ?hctx,
MainThreadGroup(?hctx, ?alloc) <-
  Type:Value(?type, "<<jvm-startup>>"),
  HeapAllocationValue(?alloc, "<<main-thread-group>>").

HContext(?hctx),
HContextFromRealHContext[?type] = ?hctx,
MainThread(?hctx, ?alloc) <-
  Type:Value(?type, "<<jvm-startup>>"),
  HeapAllocationValue(?alloc, "<<main-thread>>").


// Merge optimization hack

// For this analysis, we only need two of the parameters that may influence the
// new context object.
MyMergeBasis(?hctx, ?heap) <-
  MergeBasis(_, _, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.  We also
// cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContextFromHContext[?hctx], DeclaringClass:Allocation[?heap]] = ?calleeCtx,
OptimizeMerge[?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?heap).


// Initially reachable methods
Context(?ctx),
ContextFromRealContext[?type1, ?type2] = ?ctx,
ReachableContext(?ctx, ?method) <-
  MainMethodDeclaration(?method),
  ClassTypeValue(?type1, "java.lang.String"),
  Type:Value(?type2:"<<initial-context>>").

Context(?ctx),
ContextFromRealContext[?type1, ?type2] = ?ctx,
ReachableContext(?ctx, ?method) <-
  ImplicitReachable(?method),
  ClassTypeValue(?type1, "java.lang.String"),
  Type:Value(?type2:"<<jvm-startup>>").

Context(?ctx),
ContextFromRealContext[?type1, ?type2] = ?ctx,
ReachableContext(?ctx, ?clinit) <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  ClassTypeValue(?type1, "java.lang.String"),
  Type:Value(?type2:"<<class-initialization>>").


//// ---- Leftovers from experiment below ----
//// What if we had context-sensitive reflective calls but separated from
//// regular ones (with unique context constructors)
//ReflectiveContextFromRealContext[?type1, ?type2] = ?ctx ->
//  Context(?ctx), Type(?type1), Type(?type2).
//lang:skolem(`ReflectiveContextFromRealContext).
//
//RealContext1FromContext[?ctx] = ?type1,
//RealContext2FromContext[?ctx] = ?type2 <-
//  ReflectiveContextFromRealContext[?type1, ?type2] = ?ctx.
//
//ReflectiveHContextFromRealHContext[?type] = ?hctx ->
//  HContext(?hctx), Type(?type).
//lang:skolem(`ReflectiveHContextFromRealHContext).
//RealHContextFromHContext[?hctx] = ?type <-
//  ReflectiveHContextFromRealHContext[?type] = ?hctx.
