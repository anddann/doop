// In this analysis, the real context is a pair of Types AND a MethodInvocation
// (for static calls) sometimes.  The real heap context is a single Type.
// Keeping mapping functions is the way to handle analyses where HContext =
// Context (since the language considers them different types).  The type is
// not always a class type, because of arrays currently being a non-class
// subtype of Object
ContextFromRealContext[?type1, ?type2] = ?ctx ->
  Context(?ctx), Instruction(?type1), Instruction(?type2).
lang:constructor(`ContextFromRealContext).

// NOTE: Use the following when using both the normal (caller's) context and
// the invocation site for static calls.
SpecialContextFromRealContext[?type1, ?invocation, ?type2] = ?ctx ->
  Instruction(?type1), MethodInvocation(?invocation), Instruction(?type2), Context(?ctx).
lang:constructor(`SpecialContextFromRealContext).

RealContext1FromContext[?ctx] = ?type ->
  Context(?ctx), Instruction(?type).
RealContext2FromContext[?ctx] = ?type ->
  Context(?ctx), Instruction(?type).

HContextFromRealHContext[?type] = ?hctx ->
  HContext(?hctx), Instruction(?type).
lang:constructor(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?type ->
  HContext(?hctx), Instruction(?type).
