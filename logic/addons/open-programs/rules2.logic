
// can be done during "basic" analysis phase

// Framework and benchmark specific stuff (TODO - take out of here) 

ClassToMock(?type) <- ?typeStr = "javax.servlet.http.Cookie[]", ReferenceType(?type), Type:Value(?type:?typeStr).
ClassToMock(?type) <- ?typeStr = "javax.servlet.http.Cookie", ReferenceType(?type), Type:Value(?type:?typeStr).
ClassToMock(?type) <- ?typeStr = "java.sql.Connection", ReferenceType(?type), Type:Value(?type:?typeStr).

// statically initialize driver factory with a "fake" driver
MockEntryPoint(?type, "<java.sql.DriverManager: java.sql.Connection registerDriver(java.sql.Driver driver)>") <- ?typeStr = "java.sql.DriverManager", ClassType(?type), Type:Value(?type:?typeStr).

ServletEntryMethodName("doGet").
ServletEntryMethodName("doPost").

FormalParamOpt(?index, ?method, ?formal) <- FormalParam[?index, ?method] = ?formal.

AllConcreteImplementations(?class, ?staticType) <-
   SubtypeOf(?class, ?staticType),
   ClassType(?class),
   !ClassModifier("abstract", ?class).

AllConcreteImplementations(?class, ?class) <-
   ClassType(?class),
   !ClassModifier("abstract", ?class).

AllConcreteImplementations(?type, ?type) <-
   ArrayType(?type).

ServletClass(?class) <-
   AllConcreteImplementations(?class, ?staticType),
   ClassType(?class),
   Type:Value(?staticType:"javax.servlet.http.HttpServlet").

ClassToMock(?class) -> ReferenceType(?class).

ClassToMock(?class) <-
   MockEntryPoint(?class, ?method),
   !Method:Modifier("static", ?method).

ClassToMock(?fieldType) <-
   FieldInformationOpt(_, _, ?fieldType),
   ReferenceType(?fieldType).

ClassToMock(?class) <-
   TaintSourceMethod(?method),
   Method:DeclaringType[?method] = ?class.

ClassToMock(?class) <-
   LeakingSinkMethod(_, ?method),
   Method:DeclaringType[?method] = ?class.

MockObject(?classHeap, ?class) <-
   ClassToMock(?class),
   Type:Value(?class:?classStr),
   ?classHeap = "<Mock allocation for " + ?classStr + ">".

ClassToMock(?componentType) <-
   ReferenceType(?componentType),
   MockObject(_, ?type),
   ArrayType(?type),
   ComponentType[?type] = ?componentType.
                 
FieldInformation(?signature, ?fieldtype, ?class) ->
   Field(?signature), Type(?fieldtype), Type(?class).

FieldInformation(?signature, ?fieldtype, ?class) <-
   Field:Type[?signature] = ?fieldtype,
   Field:DeclaringType[?signature] = ?class,
   MockObject(_, ?class).

FieldInformation(?signature, ?fieldtype, ?class) <-
   FieldInformation(?signature, ?fieldtype, ?staticType),
   AllConcreteImplementations(?class, ?staticType),
   MockObject(_, ?class).

FieldInformation(?signature, ?fieldStaticType, ?class) <-
   FieldInformationOpt(?signature, ?class, ?fieldStaticType).

FieldInformationOpt(?signature, ?class, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class).
   
MockHeapForField(?signature, ?baseheap, ?fieldtype) ->
   Field(?signature), Type(?fieldtype), HeapAllocation(?baseheap).

MockHeapForField(?signature, ?baseheap, ?fieldtype) <-
   FieldInformation(?signature, ?fieldtype, ?class),
   MockObjectHeap(?baseheap, ?class).

MockObjectHeap(?heap, ?fieldtype) -> HeapAllocation(?heap), Type(?fieldtype).

MockObjectOpt(?fieldtype, ?heap) <- MockObject(?heap, ?fieldtype).

MockObjectHeap(?heap, ?fieldtype) <-
   MockObjectOpt(?fieldtype, ?heapStr),
   Instruction:Value(?heap:?heapStr), 
   HeapAllocation(?heap).


VirtualMethodInvocationSignature(?tomethod, ?callsite) <-
    VirtualMethodInvocation(?callsite, ?tomethod, _).

VirtualMethodInvocationOpt2(?callsite, ?tomethod, ?base) <-
  VirtualMethodInvocation:Base[?callsite] = ?base,
  VirtualMethodInvocationSignature(?tomethod, ?callsite).


// has to be done after basic analysis

// TODO: try to remove
//InstanceFieldPointsTo(?hctx, ?heap, ?signature, ?hctx, ?baseheap) <-
//   ImmutableHContext[] = ?hctx,
//   MockHeapForField(?signature, ?baseheap, ?fieldtype),
//   MockObjectHeap(?heap, ?fieldtype).


ArrayIndexPointsTo(?hctx, ?componentHeap, ?hctx, ?arrayHeap) <-
   MockObjectHeap(?arrayHeap, ?arrayType),
   ArrayType(?arrayType),
   ComponentType[?arrayType] = ?componentType,
   MockObjectHeap(?componentHeap, ?componentType),
   ImmutableHContext[] = ?hctx.

ImplicitReachable(?method) <- MockEntryPoint(_, ?method).

MockObject(?description, ?staticType),
MocksForFormals(?description, ?staticType, ?index, ?method) <-
   ReferenceType(?staticType),
   FormalParam[?index, ?method] = ?formal,
   Var:Type[?formal] = ?staticType,
   Method:Value(?method:?methodStr),
   MockEntryPoint(_, ?method),
   Type:Value(?staticType:?staticTypeStr), 
   ?description = "<Mock " + ?methodStr + ": " + ?staticTypeStr + ">".

// Servlet service methods
MockEntryPoint(?class, ?entry) <-
   ServletClass(?class),
   Type:Value(?class:?classStr),
   ServletEntryMethodName(?serviceMethodName),
   Method:Value(?entry:methodSigStr),
   // TODO: try removing initializer
   (methodSigStr = "<" + ?classStr +": void <init>()>" ; methodSigStr = "<" + ?classStr + ": void " + ?serviceMethodName +"(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>"),
   ServletEntryMethodName(?serviceMethodName).

// bind mock objects to formals

HeapIdForFormalInContext(?ctx, ?formal, ?heapStr) <-
   MocksForFormals(?heapStr, _, ?index, ?method),
   ReachableContext(?ctx, ?method),
   FormalParam[?index, ?method] = ?formal.


VarPointsTo(?hctx, ?heap, ?ctx, ?formal)
 <-
   HeapIdForFormalInContext(?ctx, ?formal, ?heapStr),
   Instruction:Value(?heap:?heapStr), 
   ImmutableHContext[] = ?hctx,
   HeapAllocation(?heap).

// bind mock objects to receivers
HeapForReceiverInContext(?ctx, ?receiver, ?heapStr) <-
   ReachableContext(?ctx, ?method),
   ThisVar[?method] = ?receiver,
   Method:DeclaringType[?method] = ?class,
   MockObjectHeap(?heapStr, ?class).
   
VarPointsTo(?hctx, ?heap, ?ctx, ?receiver)
 <-
   ImmutableHContext[] = ?hctx,
   HeapForReceiverInContext(?ctx, ?receiver, ?heap).


// ============================ TODO: port ===============================

// Overridable methods on tainted objects return tainted objects


CallToMethodOfExternalInterface(?ctx, ?callsite, ?tomethod) <-
  VirtualMethodInvocationOpt2(?callsite, ?tomethod, ?base),
  MockObjectHeap(?heap, ?heaptype),
  VarPointsTo(_, ?heap, ?ctx, ?base),
  InterfaceType(?heaptype).


Blah(?ctx, ?var, ?type),
VarPointsToExternalHeapObjectForType(?ctx, ?var, ?type) <-
  CallToMethodOfExternalInterface(?ctx, ?callsite, ?tomethod),
  ReturnVar(?retVar, ?tomethod),
  Var:Type(?retVar, ?type),
  AssignReturnValue(?callsite, ?var).


Blah2(?ctx, ?var, ?type),
VarPointsToExternalHeapObjectForType(?ctx, ?var, ?type) <-
  CallToMethodOfExternalInterface(?ctx, ?callsite, ?tomethod),
  AssignReturnValue(?callsite, ?var),
  Method:ReturnType[?tomethod] = ?type.

PotentialCallToExternalOverridableMethod(?heaptype, ?callerCtx, ?callsite) <-
  MockObjectHeap(?heap, ?heaptype),
  VarPointsTo(_, ?heap, ?callerCtx, ?base),
  OptVirtualMethodInvocationBase(?callsite, ?base).

CallToExternalOverridableMethod(?callerCtx, ?callsite, ?tomethod) <-
  PotentialCallToExternalOverridableMethod(?heaptype, ?callerCtx, ?callsite),
  VirtualMethodInvocation:SimpleName(?callsite, ?simplename),
  VirtualMethodInvocation:Descriptor(?callsite, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?tomethod),
  OverridableMethod(?heaptype, ?tomethod).

VarPointsToExternalHeapObjectForType(?ctx, ?var, ?type) <-
  CallToExternalOverridableMethod(?ctx, ?callsite, ?tomethod),
  ReturnVar(?retVar, ?tomethod),
  Var:Type(?retVar, ?type),
  AssignReturnValue(?callsite, ?var).


/* Adds a tuple (heap, var) when heap is ExternalHeapAllocation 
   and the type of heap matches the type of var. 
*/
VarPointsTo(?hctx, ?heap, ?ctx, ?var) <- // TODO create special merge macro
  ImmutableHContext[] = ?hctx,
  VarPointsToExternalHeapObjectForType(?ctx, ?var, ?type),
  MockObjectHeap(?heap, ?type).

/* Adds a tuple (heap, var) to VarPointsTo even if the types 
  of heap and var do not match,... but there is an assign-cast 
  and the type of heap matches the cast type
*/
VarPointsTo(?hctx, ?heap, ?ctx, ?var) <- // TODO create special merge macro
  ImmutableHContext[] = ?hctx,
  VarPointsToExternalHeapObjectForType(?ctx, ?var, ?type),
  CompatibleAssignCast(_, ?var, ?type),
  MockObjectHeap(?heap, ?type).


OptAssignCast3(?to, ?from, ?castType) <- OptAssignCast(?castType, ?to, ?from).

OptCheckCast(?type, ?castType) <- CheckCast(?castType, ?type).

CompatibleAssignCast(?to, ?from, ?type) <-
   OptAssignCast3(?to, ?from, ?castType),
   OptCheckCast(?type, ?castType).

MethodInvocationInContext(?ctx, ?callsite, ?tomethod) <- CallToMethodOfExternalInterface(?ctx, ?callsite, ?tomethod).

MethodInvocationInContext(?ctx, ?callsite, ?tomethod) <- CallToExternalOverridableMethod(?ctx, ?callsite, ?tomethod).