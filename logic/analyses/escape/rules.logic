lang:compiler:error:VARIABLE_SOLITARY[] = true.
//lang:compiler:error:NEGATION_RECURSION[] = false.
//lang:compiler:warning:NEGATION_RECURSION[] = false.

/////////////////////////////////////////
AccessPath(?ap),
AccessPath:ByVar[?var] = ?ap,
AccessPath:ToVar[?ap] = ?var,
AccessPath:ToString[?ap] = ?str <-
  Var(?var),
  ReferenceType(Var:Type[?var]),
  Var:Value(?var:?str).

AccessPath(?ap),
AccessPath:ByInstanceFld[?base, ?fld] = ?ap,
AccessPath:ToInstanceFld:Base[?ap] = ?base,
AccessPath:ToInstanceFld:Fld[?ap] = ?fld,
AccessPath:ToString[?ap] = ?str <-
  (StoreInstanceField(_, ?base, ?fld, _) ;
   LoadInstanceField(?base, ?fld, _, _)),
  ReferenceType(FieldSignature:Type[?fld]),
  Var:Value(?base:?baseStr),
  FieldSignature:Value(?fld:?fldStr),
  ?str = ?baseStr + "." + ?fldStr.
/////////////////////////////////////////

/////////////////////////////////////////
_Move:Insn(?insn) <-
  AssignLocal:From[?insn] = _ ;
  AssignCast:From[?insn] = _.
lang:derivationType[`_Move:Insn] = "Derived".
_Move(?ap1, ?ap2, ?insn) <-
  AssignInstruction:To[?insn] = ?to,
  (AssignLocal:From[?insn] = ?from ;
   AssignCast:From[?insn] = ?from),
  AccessPath:ByVar[?to] = ?ap1,
  AccessPath:ByVar[?from] = ?ap2.

_LoadInstanceFld(?ap1, ?ap2, ?insn) <-
  LoadInstanceField:To[?insn] = ?to,
  LoadInstanceField:Base[?insn] = ?base,
  FieldInstruction:Signature[?insn] = ?fld,
  AccessPath:ByVar[?to] = ?ap1,
  AccessPath:ByInstanceFld[?base, ?fld] = ?ap2.

_LoadStaticFld(?to, ?fld, ?insn) <-
  LoadStaticField:To[?insn] = ?to,
  FieldInstruction:Signature[?insn] = ?fld.

_StoreInstanceFld(?ap1, ?ap2, ?insn) <-
  StoreInstanceField:Base[?insn] = ?base,
  FieldInstruction:Signature[?insn] = ?fld,
  StoreInstanceField:From[?insn] = ?from,
  AccessPath:ByInstanceFld[?base, ?fld] = ?ap1,
  AccessPath:ByVar[?from] = ?ap2.

_StoreStaticFld(?fld, ?from, ?insn) <-
  FieldInstruction:Signature[?insn] = ?fld,
  StoreStaticField:From[?insn] = ?from.
/////////////////////////////////////////


/////////////////////////////////////////
MayAlias(?ap2, ?ap1, ?insn) <-
  MayAlias(?ap1, ?ap2, ?insn),
  ?ap1 != ?ap2.

MayAlias(?ap1, ?ap3, ?insn) <-
  MayAlias(?ap1, ?ap2, ?insn),
  MayAlias(?ap2, ?ap3, ?insn),
  ?ap1 != ?ap3.

MayAlias(?ap1, ?ap2, ?insn) <-
  MayAlias(?ap1, ?ap2, ?insn0),
  Instruction:Next[?insn0] = ?insn,
  DoesNotEscape(?ap1, ?insn),
  DoesNotEscape(?ap2, ?insn).
/////////////////////////////////////////


/////////////////////////////////////////
DoesNotEscape:Before(?insn0, ?ap, ?insn) <-
  DoesNotEscape(?ap, ?insn0),
  Instruction:Next[?insn0] = ?insn.
lang:derivationType[`DoesNotEscape:Before] = "Derived".

DoesNotEscape(?ap, ?insn) <-
  AssignHeapAllocation:Insn(?insn),
  AssignInstruction:To[?insn] = ?var,
  AccessPath:ByVar[?var] = ?ap.

MayAlias(?ap1, ?ap2, ?insn),
DoesNotEscape(?ap1, ?insn),
DoesNotEscape(?ap2, ?insn) <-
  DoesNotEscape:Before(_, ?ap2, ?insn),
  _Move(?ap1, ?ap2, ?insn).

PropagateToAliases(?ap1, ?ap2, ?insn),
MayAlias(?ap1, ?ap2, ?insn),
//DoesNotEscape(?ap0, ?insn),
DoesNotEscape(?ap1, ?insn),
DoesNotEscape(?ap2, ?insn) <-
  DoesNotEscape:Before(?insn0, ?ap0, ?insn),
  DoesNotEscape:Before(?insn0, ?ap2, ?insn),
  _StoreInstanceFld(?ap1, ?ap2, ?insn),
  AccessPath:ToInstanceFld:Base[?ap1] = ?base,
  AccessPath:ByVar[?base] = ?ap0.

PropagateToAliases(?ap1, ?ap2, ?insn),
MayAlias(?ap1, ?ap2, ?insn),
DoesNotEscape(?ap1, ?insn),
DoesNotEscape(?ap2, ?insn) <-
  DoesNotEscape:Before(_, ?ap2, ?insn),
  _LoadInstanceFld(?ap1, ?ap2, ?insn).


// Frame rules //////////////////////////
/////////////////////////////////////////
DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(_, ?ap, ?insn),
  AssignHeapAllocation:Insn(?insn).

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(_, ?ap, ?insn),
  _Move:Insn(?insn),
  !_Move(?ap, _, ?insn),
  !_Move(_, ?ap, ?insn).

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(_, ?ap, ?insn),
  ReturnVoid:Insn(?insn).

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(?insn0, ?ap, ?insn),
  StoreInstanceField:Insn(?insn),
  MayAlias(?apAlt, ?ap, ?insn0),
  AccessPath:ToVar[?apAlt] = ?varAlt,
  AccessPath:ToVar[?ap] = ?var,
  !StoreInstanceField:From[?insn] = ?varAlt,
  !StoreInstanceField:From[?insn] = ?var.

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(?insn0, ?ap, ?insn),
  LoadInstanceField:Insn(?insn),
  MayAlias(?apAlt, ?ap, ?insn0),
  AccessPath:ToVar[?apAlt] = ?varAlt,
  AccessPath:ToVar[?ap] = ?var,
  !LoadInstanceField:To[?insn] = ?varAlt,
  !LoadInstanceField:To[?insn] = ?var.

MayAlias(?ap1, ?ap3, ?insn),
DoesNotEscape(?ap3, ?insn) <-
  MayAlias(?ap2, ?ap3, ?insn0),
  Instruction:Next[?insn0] = ?insn,
  PropagateToAliases(?ap1, ?ap2, ?insn).

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(?insn0, ?ap, ?insn),
  StoreStaticField:Insn(?insn),
  MayAlias(?apAlt, ?ap, ?insn0),
  AccessPath:ToVar[?apAlt] = ?varAlt,
  AccessPath:ToVar[?ap] = ?var,
  !StoreStaticField:From[?insn] = ?varAlt,
  !StoreStaticField:From[?insn] = ?var.

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(?insn0, ?ap, ?insn),
  LoadStaticField:Insn(?insn),
  MayAlias(?apAlt, ?ap, ?insn0),
  AccessPath:ToVar[?apAlt] = ?varAlt,
  AccessPath:ToVar[?ap] = ?var,
  !LoadStaticField:To[?insn] = ?varAlt,
  !LoadStaticField:To[?insn] = ?var.

DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(?insn0, ?ap, ?insn),
  ReturnNonvoid:Insn(?insn),
  MayAlias(?apAlt, ?ap, ?insn0),
  AccessPath:ToVar[?apAlt] = ?varAlt,
  AccessPath:ToVar[?ap] = ?var,
  !ReturnNonvoid:Var[?insn] = ?varAlt,
  !ReturnNonvoid:Var[?insn] = ?var.


//TODO: HANDLE
DoesNotEscape(?ap, ?insn) <-
  DoesNotEscape:Before(_, ?ap, ?insn),
  SpecialMethodInvocation:Insn(?insn).
