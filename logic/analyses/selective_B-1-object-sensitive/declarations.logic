// The real context is a HeapAllocation AND a MethodInvocation (for static
// calls) sometimes. Keeping mapping functions is the way to handle analyses
// where HContext = Context (since the language considers them different
// types).
ContextFromRealContext[?heapComp] = ?ctx ->
  Context(?ctx), ContextComponent(?heapComp).
lang:constructor(`ContextFromRealContext).
// NOTE: Use the following when using both the normal (caller's) context
// and the invoComp site for static calls.
SpecialContextFromRealContext[?invoComp, ?heapComp] = ?ctx ->
  Context(?ctx), ContextComponent(?invoComp), ContextComponent(?heapComp).
lang:constructor(`SpecialContextFromRealContext).
RealContextFromContext[?ctx] = ?heapComp ->
  Context(?ctx), ContextComponent(?heapComp).

// This analysis has no context for heap objects. This is emulated by creating
// a single HContext object, which is used everywhere.
HContextFromRealHContext[] = ?hctx -> HContext(?hctx).
lang:constructor(`HContextFromRealHContext).
