#define NormalHeapConsMacro(id, type, heap) \
  HeapAllocation:Normal:Con[id] = heap, \
  HeapAllocation:Id[heap] = id, \
  NormalHeap(heap), \
  HeapAllocation:Type[heap] = type

#define StringConstantConsMacro(id, type, heap) \
  HeapAllocation:String:Con[id] = heap, \
  HeapAllocation:Id[heap] = id, \
  StringConstant(heap), \
  HeapAllocation:Type[heap] = type

#define ClassHeapConsMacro(id, type, heap) \
  HeapAllocation:Class:Con[id] = heap, \
  HeapAllocation:Id[heap] = id, \
  ClassHeap(heap), \
  HeapAllocation:Type[heap] = type

#define MockupHeapConsMacro(id, type, heap) \
  HeapAllocation:Mockup:Con[id] = heap, \
  HeapAllocation:Id[heap] = id, \
  HeapAllocation(heap), \
  HeapAllocation:Type[heap] = type


#define PlusVar(x,method,string,type) \
  +Var(x), \
  +Var:Id(x:string), \
  +Var:Type[x] = type, \
  +Var:DeclaringMethod(x, method)

#define PlusType(x,string) \
  +Type(x), \
  +Type:Id(x:string)

#define PlusMethodInvocation(x,string) \
  +Instruction:Id(x:string), \
  +MethodInvocation(x)

#define PlusVirtualMethodInvocation(x,string) \
  +Instruction:Id(x:string), \
  +VirtualMethodInvocation:Insn(x)

#define PlusSpecialMethodInvocation(x,string) \
  +Instruction:Id(x:string), \
  +SpecialMethodInvocation:Insn(x)

#define PlusStaticMethodInvocation(x,string) \
  +Instruction:Id(x:string), \
  +StaticMethodInvocation:Insn(x)

/**
 * Macros that fix the lack of ref-modes on subtypes in LB
 */
#define MethodInvocationValue(x, y) Instruction:Id(x:y), MethodInvocation(x)
#define ClassTypeValue(x,y) Type:Id(x:y), ClassType(x)
