#include "../context-insensitive/declarations.logic"
#include "../../addons/cfg-analysis/declarations.logic"

/**
 * Caller - callee edges
 */
CallGraphMethodEdge(?toMethod, ?fromMethod) ->
    MethodSignature(?toMethod),
    MethodSignature(?fromMethod).

/**
 * Transitive closure of the above
 */
CallGraphMethodTransitive(?fromMethod, ?toMethod) ->
    MethodSignature(?fromMethod),
    MethodSignature(?toMethod).


/**
 * Load-store dependency of a static field
 */
StaticFieldMethodDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Load-store dependency of an instance field
 */
InstanceFieldMethodDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).

/**
 * Load-store dependency on an array
 */
HeapArrayMethodDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).


/**
 * Any one of the above data dependencies
 */
MethodHeapDataDep(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).


/**
 * Any data or call graph dependency
 */
MethodDependency(?method, ?dependsOn) ->
    MethodSignature(?method),
    MethodSignature(?dependsOn).


/**
 * Instruction reads from var
 */
InstructionUsesVar(?instruction, ?var) ->
    Instruction(?instruction),
    Var(?var).


/**
 * Instruction writes to var
 */
InstructionDefinesVar(?instruction, ?var) ->
    Instruction(?instruction),
    Var(?var).


/**
 * Pretty much the inverse of the Dominates etc predicates from the cfg-analysis addon
 */
PostDominates(?dominator, ?insn) ->
    Instruction(?dominator),
    Instruction(?insn).

CFGLeaf(?headInsn, ?method) ->
    Instruction(?headInsn),
    MethodSignature(?method).

DoesNotPostDominate(?postDomCandidate, ?insn) ->
    Instruction(?postDomCandidate),
    Instruction(?insn).

/**
 * REQUIRES SSA
 * Intra-procedural data dependencies
 */

IntraProceduralDataDep(?from, ?to) ->
    Instruction(?from),
    Instruction(?to).


/**
 * Basic block depends on instruction
 */

IntraProceduralControlDep(?fromBlock, ?to) ->
    Instruction(?fromBlock),
    Instruction(?to).

/**
 * All kinds of intra-procedural dependence - transitively closed
 */
IntraProceduralDependencyBase(?to, ?from) ->
    Instruction(?from),
    Instruction(?to).

IntraProceduralDependency(?from, ?to) ->
    Instruction(?from),
    Instruction(?to).


/**
 * Instructions found to be data/control dependent on the initial interesting instructions
 */
InterestingInstruction(?callsite, ?insn) ->
    Instruction(?insn),
    MethodInvocation(?callsite).

/**
 * Instructions to perform a forward slice on
 */
InterestingInstructionInit(?callsite, ?insn) ->
    Instruction(?insn),
    MethodInvocation(?callsite).

/**
 * Load instruction that loads interesting data
 */
InterestingLoad(?insn) ->
    Instruction(?insn).

/**
 * Currently invocation params/return value dependencies
 */
InterProceduralDependency(?callsite, ?to, ?from) ->
    Instruction(?from),
    Instruction(?to),
    MethodInvocation(?callsite).

/**
 * Method that contains the initial interesting instructions
 */
InterestingInitMethod(?initMeth) ->
    MethodSignature(?initMeth).

/**
 * Instructions that can possibly be influenced by the initial interesting instruction
 * Found by following the dependency transitive graph
 */
InterestingViaCG(?insn) ->
    Instruction(?insn).
