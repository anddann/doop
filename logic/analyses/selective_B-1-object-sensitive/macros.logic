// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx


// For this analysis the context of a method call corresponds to the
// identity of the receiver object. Again, this may trigger creation of
// a new object.
#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[heapComp] = calleeCtx, \
  ContextComponent(heapComp), \
  ContextComponent:HeapAllocation[heap] = heapComp

// For this analysis, static calls use additionally the invocation site as a context.
#define MergeStaticMacro(callerCtx, invo, calleeCtx) \
  Context(calleeCtx), \
  SpecialContextFromRealContext[invoComp, RealContextFromContext[callerCtx]] = calleeCtx, \
  ContextComponent(invoComp), \
  ContextComponent:Invocation[invo] = invoComp

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[heapComp] = newCtx, \
  ContextComponent(heapComp), \
  ContextComponent:HeapAllocation[heap] = heapComp

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[heapComp] = calleeCtx, \
  ContextComponent(heapComp), \
  ContextComponent:HeapAllocation[heap] = heapComp

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[heapComp] = newCtx, \
  ContextComponent(heapComp), \
  ContextComponent:HeapAllocation[heap] = heapComp
