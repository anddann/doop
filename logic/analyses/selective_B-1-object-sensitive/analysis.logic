// Context-sensitive pointer analysis with context of 1 object
// (AND for static calls 1 call-site).

RealContextFromContext[?ctx] = ?heapComp <-
  ContextFromRealContext[?heapComp] = ?ctx.
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
RealContextFromContext[?ctx] = ?heapComp <-
  SpecialContextFromRealContext[_, ?heapComp] = ?ctx.

Context(?ctx),
ContextFromRealContext[?heapComp] = ?ctx,
ContextComponent(?heapComp),
ContextComponent:HeapAllocation[?heap] = ?heapComp,
ImmutableContext(?ctx) <-
  HeapAllocation:byValue["<<immutable-context>>"] = ?heap.

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
ImmutableHContext(?hctx).


// Create initial objects with their heap contexts
HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
SystemThreadGroup(?hctx, ?alloc) <-
  HeapAllocation:byValue["<<system-thread-group>>"] = ?alloc.

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
MainThreadGroup(?hctx, ?alloc) <-
  HeapAllocation:byValue["<<main-thread-group>>"] = ?alloc.

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
MainThread(?hctx, ?alloc) <-
  HeapAllocation:byValue["<<main-thread>>"] = ?alloc.


// Initially reachable methods
Context(?ctx),
ContextFromRealContext[?heapComp] = ?ctx,
ContextComponent(?heapComp),
ContextComponent:HeapAllocation[?heap] = ?heapComp,
ReachableContext(?ctx, ?method) <-
  MainMethodDeclaration(?method),
  HeapAllocation:byValue["<<initial-context>>"] = ?heap.

Context(?ctx),
ContextFromRealContext[?heapComp] = ?ctx,
ContextComponent(?heapComp),
ContextComponent:HeapAllocation[?heap] = ?heapComp,
ReachableContext(?ctx, ?method) <-
  ImplicitReachable(?method),
  HeapAllocation:byValue["<<jvm-startup>>"] = ?heap.

Context(?ctx),
ContextFromRealContext[?heapComp] = ?ctx,
ContextComponent(?heapComp),
ContextComponent:HeapAllocation[?heap] = ?heapComp,
ReachableContext(?ctx, ?clinit) <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocation:byValue["<<class-initialization>>"] = ?heap.
