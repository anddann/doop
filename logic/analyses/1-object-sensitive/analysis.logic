#include "macros.logic"
#include "../../core/context-sensitivity.logic"

/**
 * Context-sensitive pointer analysis with context of 1 object.
 */

// In this analysis, the real context is a HeapAllocation. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
ContextFromRealContext[?heap] = ?ctx ->
  Context(?ctx), HeapAllocation(?heap).
lang:skolem(`ContextFromRealContext).
RealContextFromContext[?ctx] = ?heap -> 
  Context(?ctx), HeapAllocation(?heap).
RealContextFromContext[?ctx] = ?heap <-
  ContextFromRealContext[?heap] = ?ctx.

// This analysis has no context for heap objects.
// This is emulated by creating a single HContext object,
// which is used everywhere.
HContextFromRealHContext[] = ?hctx -> HContext(?hctx).
lang:skolem(`HContextFromRealHContext).

// No need to unwrap anything. Only used for arrays, never to
// produce regular contexts of called methods.
HContextFromContext[?ctx] = ?hctx -> Context(?ctx), HContext(?hctx).
lang:skolem(`HContextFromContext).

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
ImmutableHContext[] = ?hctx <- .

// Create initial objects with their heapcontexts.
HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?alloc).

HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?alloc).

HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?alloc).


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?heap] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
#ifdef PADDLE_COMPAT
  HeapAllocationValue(?heap, "<<no-context>>").
#else
  HeapAllocationValue(?heap, "<<initial-context>>").
#endif

ReachableContext(?ctx, ?method),
ContextFromRealContext[?heap] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
#ifdef PADDLE_COMPAT
  HeapAllocationValue(?heap, "<<no-context>>").
#else
  HeapAllocationValue(?heap, "<<jvm-startup>>").
#endif

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?heap] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
#ifdef PADDLE_COMPAT
  HeapAllocationValue(?heap, "<<no-context>>").
#else
  HeapAllocationValue(?heap, "<<class-initialization>>").
#endif
