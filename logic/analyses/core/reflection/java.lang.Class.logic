/*************************************************************
 * java.lang.Object.getClass
 *
 *   public final Class<?> getClass();
 *
 * The actual result type is Class<? extends |X|> where |X| is the erasure of
 * the static type of the expression on which getClass is called.
 *
 * Although this is a reflection operation, it is easy to analyse statically,
 * because we know the type of every heap allocation.
 *************************************************************/

/**
 * Evaluate Object.getClass
 */
VarPointsTo(?hctx, ?classHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Object:getClass(?to, ?from),
  VarPointsTo(_, ?heap, ?ctx, ?from),
  HeapAllocation:Type[?heap] = ?type,
  ReifiedClass[?type] = ?classHeap.


/*************************************************************
 * java.lang.Class.forName
 *
 *   public static Class<?> forName(String className)
 *   public static Class<?> forName(String name, boolean initialize, ClassLoader loader)
 *
 * Class.forName is the main fragile point of a static pointer analysis.
 * Arbitrary strings can be constructed by the program and used as an argument
 * to Class.forName, so we cannot predict which classes they correspond to.
 *
 * Therefore, this is also the main user-configuration point (some other
 * points-to analysis implementations configure newInstance, but we think
 * Class.forName is the appropriate place)
 *
 * We do automatically support class name strings that occur as constants in
 * the program. For those, configuration is not necessary.
 *************************************************************/

/**
 * Class.forName invocations with string constant parameters
 */
// TODO Do we need this flag at all?
// NOTE that this won't fire when we are in DISTINGUISH_NO_STRING_CONSTANTS
// mode. The constant will never flow to the ?param.
ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type) <-
  java:lang:Class:forName(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  ActualParam[0, ?invocation] = ?param,
  VarPointsTo(_, ?constant, ?ctx, ?param),
  ClassNameMatchingStringConstant:Type(?type, ?constant).

/**
 * Class.forName invocations with user-configured dynamic classes
 */
ForwardReflectiveAssignClassConstant(?ctx, ?invocation, ?type) <-
  java:lang:Class:forName(?invocation, ?inmethod),
  ReachableContext(?ctx, ?inmethod),
  Config:DynamicClass(?type, ?invocation).


/*************************************************************
 * java.lang.Class.getName
 *
 *   public String getName()
 *************************************************************/

VarPointsTo(?hctx, ?classNameHeap, ?callerCtx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getName(?to, ?from),
  VarPointsTo(_, ?classHeap, ?callerCtx, ?from),
  Instruction:Value(?classHeap:?str),
  // ?str is of the form "<class TYPE>" ; we want TYPE
  string:substring[?str, 7, string:length[?str] - 8] = ?className,
  StringConstant(?classNameHeap),
  Instruction:Value(?classNameHeap:?className).


/*************************************************************
 * java.lang.Class.getComponentType
 *
 *   public Class<?> getComponentType()
 *************************************************************/

VarPointsTo(?hctx, ?componentClassHeap, ?callerCtx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getComponentType(?to, ?from),
  VarPointsTo(_, ?classHeap, ?callerCtx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ArrayType(?type), ComponentType[?type] = ?componentType,
  ReifiedClass[?componentType] = ?componentClassHeap.


/*************************************************************
 * java.lang.Class.getSuperclass
 *
 *   public Class<? super T> getSuperclass()
 *
 * If the base type is java.lang.Object, an interface or a primitive type, then
 * null is returned.
 *
 * TODO should (can?) we handle null (for NullPointerException)?
 *************************************************************/

VarPointsTo(?hctx, ?superClassHeap, ?callerCtx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getSuperclass(?to, ?from),
  VarPointsTo(_, ?classHeap, ?callerCtx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ClassType(?type), DirectSuperclass[?type] = ?superType,
  ReifiedClass[?superType] = ?superClassHeap.

VarPointsTo(?hctx, ?superClassHeap, ?callerCtx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getSuperclass(?to, ?from),
  VarPointsTo(_, ?classHeap, ?callerCtx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ArrayType(?type), Type:Value(?superType:"java.lang.Object"),
  ReifiedClass[?superType] = ?superClassHeap.


/*************************************************************
 * java.lang.Class.getInterfaces
 *
 *   public Class<?>[] getInterfaces()
 *************************************************************/

ArrayIndexPointsTo(?hctx, ?superInterfaceHeap, ?hctx, ?arrayHeap) <-
  FillArray:Interfaces(?hctx, ?arrayHeap, ?type),
  DirectSuperinterface(?type, ?superInterface),
  ReifiedClass[?superInterface] = ?superInterfaceHeap.

FillArray:Interfaces(?hctx, ?arrayHeap, ?type),
VarPointsTo(?hctx, ?arrayHeap, ?callerCtx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getInterfaces(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?callerCtx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?type] = ?arrayHeap.


/*************************************************************
 * java.lang.Class.getDeclaredMethods and variants
 *
 *   public Method[] getMethods()
 *   public Method getMethod(String name, Class[] parameterTypes)
 *   public Method[] getDeclaredMethods()
 *   public Method getDeclaredMethod(String name, Class[] parameterTypes)
 *************************************************************/

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?heap, ?hctx, ?arrayHeap) <-
  FillArray:PublicMethods(?hctx, ?arrayHeap, ?type),
  Method:DeclaringType[?signature] = ?type,
  Method:Modifier("public", ?signature),
  ReifiedMethod[?signature] = ?heap,
  MethodNameMatchingStringConstant:Signature(?signature, _).
// we assume the returned methods will be filtered by some string
*/

FillArray:PublicMethods(?hctx, ?arrayHeap, ?type),
VarPointsTo(?hctx, ?arrayHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getMethods(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?type] = ?arrayHeap.

// NOTE that this won't fire when we are in DISTINGUISH_NO_STRING_CONSTANTS
// mode. The constant will never flow to ?param.
// NOTE Used to be: Match every method name in the class (i.e. ignore ?param)!
// TODO Merge common parts
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getMethod(?to, ?param, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  Method:DeclaringType[?signature] = ?type,
  Method:Modifier("public", ?signature),
  ReifiedMethod[?signature] = ?heap,
  VarPointsTo(_, ?constant, ?ctx, ?param),
  MethodNameMatchingStringConstant:Signature(?signature, ?constant).

/*
//VERSION-A
// REVIEW: why reuse the hctx? Just for lack of anything better? Also later.
ArrayIndexPointsTo(?hctx, ?heap, ?hctx, ?arrayHeap) <-
  FillArray:Methods(?hctx, ?arrayHeap, ?type),
  Method:DeclaringType[?signature] = ?type,
  ReifiedMethod[?signature] = ?heap,
  MethodNameMatchingStringConstant:Signature(?signature, _).
*/

FillArray:Methods(?hctx, ?arrayHeap, ?type),
VarPointsTo(?hctx, ?arrayHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getDeclaredMethods(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?type] = ?arrayHeap.

VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getDeclaredMethod(?to, ?param, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  Method:DeclaringType[?signature] = ?type,
  ReifiedMethod[?signature] = ?heap,
  VarPointsTo(_, ?constant, ?ctx, ?param),
  MethodNameMatchingStringConstant:Signature(?signature, ?constant).


/*************************************************************
 * java.lang.Class.getConstructors and variants
 *
 *   public Constructor[] getConstructors()
 *   public Constructor getConstructor(Class[] parameterTypes)
 *   public Constructor[] getDeclaredConstructors()
 *   public Constructor getDeclaredConstructor(Class[] parameterTypes)
 *************************************************************/

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?heap, ?hctx, ?arrayHeap) <-
  FillArray:PublicConstructors(?hctx, ?arrayHeap, ?classHeap),
  OptClassToConstructor(?constructor, ?classHeap),
  Method:Modifier("public", ?constructor),
  ReifiedConstructor[?constructor] = ?heap.
*/

FillArray:PublicConstructors(?hctx, ?arrayHeap, ?classHeap),
VarPointsTo(?hctx, ?arrayHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getConstructors(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?class] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?class] = ?arrayHeap.

// NOTE Because of the inherent imprecision in array handling (the argument),
// we assume that any constructor might be returned here.
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getConstructor(?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?classHeap),
  Method:Modifier("public", ?constructor),
  ReifiedConstructor[?constructor] = ?heap.

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?heap, ?hctx, ?arrayHeap) <-
  FillArray:Constructors(?hctx, ?arrayHeap, ?classHeap),
  OptClassToConstructor(?constructor, ?classHeap),
  ReifiedConstructor[?constructor] = ?heap.
*/

FillArray:Constructors(?hctx, ?arrayHeap, ?classHeap),
VarPointsTo(?hctx, ?arrayHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getDeclaredConstructors(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?class] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?class] = ?arrayHeap.

// NOTE Because of the inherent imprecision in array handling (the argument),
// we assume that any constructor might be returned here.
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getDeclaredConstructor(?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?classHeap),
  ReifiedConstructor[?constructor] = ?heap.


/*************************************************************
 * java.lang.Class.getFields and variants
 *
 *   public Field[] getFields()
 *   public Field getField(String name)
 *   public Field[] getDeclaredFields()
 *   public Field getDeclaredField(String name)
 *
 * NOTE
 * If this Class object represents a class, getFields returns the public fields
 * of this class and of all its superclasses. If this Class object represents
 * an interface, getFields returns the fields of this interface and of all its
 * superinterfaces. The same apply to getField.
 *
 * getDeclaredFields and getDeclaredField will only search in the fields
 * directly declared in the class or interface.
 *************************************************************/

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?heap, ?hctx, ?arrayHeap) <-
  FillArray:PublicFields(?hctx, ?arrayHeap, ?type),
  SupertypeOf(?superClass, ?type),
  Field:DeclaringType[?fld] = ?superClass,
  Field:Modifier("public", ?fld),
  ReifiedField[?fld] = ?heap,
  FieldNameMatchingStringConstant:Signature(?fld, _).
*/

FillArray:PublicFields(?hctx, ?arrayHeap, ?type),
VarPointsTo(?hctx, ?arrayHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getFields(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?type] = ?arrayHeap.

// NOTE that this won't fire when we are in DISTINGUISH_NO_STRING_CONSTANTS
// mode. The constant will never flow to ?param.
// NOTE Used to be: Match every method name in the class (i.e. ignore ?param)!
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getField(?to, ?param, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  VarPointsTo(_, ?constant, ?ctx, ?param),
  FieldNameMatchingStringConstant:Signature(?fld, ?constant),
  SupertypeOf(?superClass, ?type),
  Field:DeclaringType[?fld] = ?superClass,
  Field:Modifier("public", ?fld),
  ReifiedField[?fld] = ?heap.

/*
//VERSION-A
ArrayIndexPointsTo(?hctx, ?heap, ?hctx, ?arrayHeap) <-
  FillArray:Fields(?hctx, ?arrayHeap, ?class),
  Field:DeclaringType[?fld] = ?class,
  ReifiedField[?fld] = ?heap,
  FieldNameMatchingStringConstant:Signature(?fld, _).
*/

FillArray:Fields(?hctx, ?arrayHeap, ?type),
VarPointsTo(?hctx, ?arrayHeap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getDeclaredFields(?invocation, ?to, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  ReflectiveHeapAllocation[?invocation, ?type] = ?arrayHeap.

VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getDeclaredField(?to, ?param, ?from),
  VarPointsTo(_, ?classHeap, ?ctx, ?from),
  ReifiedClass[?type] = ?classHeap,
  VarPointsTo(_, ?constant, ?ctx, ?param),
  FieldNameMatchingStringConstant:Signature(?fld, ?constant),
  Field:DeclaringType[?fld] = ?type,
  ReifiedField[?fld] = ?heap.


/*************************************************************
 * java.lang.Class.newInstance
 *
 *   public Object newInstance() 
 *
 * The class is instantiated as if by a new expression with an empty argument
 * list. The class is initialized if it has not already been initialized.
 * Throws:
 *   - IllegalAccessException if the class or its nullary constructor is not accessible
 *   - InstantiationException if this Class represents an abstract class, an
 *   interface, an array class, a primitive type, or void; or if the class has
 *   no nullary constructor.
 *
 * NOTE
 *    - For the OpenJDK there is a duplication of simulating, since we
 *      also simulate reflective constructor invocations. We'll soon
 *      sort out what needs to be in #ifdefs exactly.
 *************************************************************/

// Simple optimization predicate. It matters.
OptClassToConstructor(?constructor, ?classHeap) <-
  ReifiedClass[?type] = ?classHeap,
  Method:DeclaringType[?constructor] = ?type,
  Method:SimpleName[?constructor] = "<init>".

ReflectiveAssignHeapAllocation(?invocation, ?type, ?ctx, ?to),
ReflectiveSpecialMethodInvocation(?invocation, ?constructor, ?ctx, ?to),
ReflectiveBaseVar[?invocation] = ?to <-
  java:lang:Class:newInstance(?invocation, ?to, ?from),
  VarPointsTo(_, ?class, ?ctx, ?from),
  OptClassToConstructor(?constructor, ?class),
  Method:DeclaringType[?constructor] = ?type.


/*************************************************************
 * java.lang.Class.getClassLoader
 *
 *   public ClassLoader getClassLoader()
 *
 * NOTE  
 * We just create a dummy heap object to represent the ClassLoader returned.
 *************************************************************/
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:Class:getClassLoader(?invocation, ?to, ?from),
  Var:DeclaringMethod(?from, ?method),
  ReachableContext(?ctx, ?method),
  ReflectiveHeapAllocation[?invocation, "java.lang.ClassLoader"] = ?heap.
  
/*************************************************************
 * java.lang.ClassLoader.getResource
 *
 *   public URL getResource(java.lang.String)
 *
 * NOTE  
 * We just create a dummy heap object to represent the URL resource returned.
 *************************************************************/
VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  ImmutableHContext[] = ?hctx,
  java:lang:ClassLoader:getResource(?invocation, ?to, ?from),
  Var:DeclaringMethod(?from, ?method),
  ReachableContext(?ctx, ?method),
  ReflectiveHeapAllocation[?invocation, "java.net.URL"] = ?heap.
