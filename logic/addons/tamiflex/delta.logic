+Instruction:Value(?obj:?objStr),
+HeapAllocation(?obj),
+HeapAllocation:Type[?obj] = ?objType,
+Tamiflex:Class:NewInstance(?invocation, ?obj)
<-
   Method:Value(?sig:"<java.lang.Class: java.lang.Object newInstance()>"),
   VirtualMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?objTypeStr, ?invocation),
   Instruction:Value@previous(?invocation:?invocationStr),
   ?objStr = "<(Tamiflex) " + ?invocationStr + "/" + ?objTypeStr + ">",
   Type:fqn(?objType:?objTypeStr).

+Instruction:Value(?obj:?objStr),
+HeapAllocation(?obj),
+HeapAllocation:Type[?obj] = ?objType,
+Tamiflex:Constructor:NewInstance(?invocation, ?constructor, ?obj)
<-
   Method:Value(?sig:"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
   VirtualMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?constructorStr, ?invocation),
   Instruction:Value@previous(?invocation:?invocationStr),
   Method:Value(?constructor:?constructorStr),
   Method:DeclaringType[?constructor] = ?objType,
   Type:fqn(?objType:?objTypeStr),
   ?objStr = "<(Tamiflex) " + ?invocationStr + "/" + ?objTypeStr + ">".

+Instruction:Value(?obj:?objStr),
+HeapAllocation(?obj),
+HeapAllocation:Type[?obj] = ?objType,
+Tamiflex:Array:NewInstance(?invocation, ?obj)
<-
   Method:Value(?sig:"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"),
   StaticMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?objTypeStr, ?invocation),
   Instruction:Value@previous(?invocation:?invocationStr),
   ?objStr = "<(Tamiflex) " + ?invocationStr + "/" + ?objTypeStr + ">",
   Type:fqn(?objType:?objTypeStr).

+LoadArrayIndex(?array, ?value, ?inmethod)
<-
   Method:Value(?sig:"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>"),
   StaticMethodInvocation(?invocation, ?sig, ?inmethod),
   ActualParam[0, ?invocation] = ?array,
   AssignReturnValue[?invocation] = ?value.

+StoreArrayIndex(?value, ?array, ?inmethod)
<-
   Method:Value(?sig:"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>"),
   StaticMethodInvocation(?invocation, ?sig, ?inmethod),
   ActualParam[0, ?invocation] = ?array,
   ActualParam[2, ?invocation] = ?value.

+LoadInstanceField(?base, ?fld, ?to, ?inmethod)
<-
   Method:Value(?sig:"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"),
   VirtualMethodInvocation(?invocation, ?sig, ?inmethod),
   Tamiflex:ReflectionMap(?fldStr, ?invocation),
   Field:Value(?fld:?fldStr),
   ! Field:Modifier("static", ?fld),
   ActualParam[0, ?invocation] = ?base,
   AssignReturnValue[?invocation] = ?to.

+LoadStaticField(?fld, ?to, ?inmethod)
<-
   Method:Value(?sig:"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"),
   VirtualMethodInvocation(?invocation, ?sig, ?inmethod),
   Tamiflex:ReflectionMap(?fldStr, ?invocation),
   Field:Value(?fld:?fldStr),
   Field:Modifier("static", ?fld),
   AssignReturnValue[?invocation] = ?to.

+StoreInstanceField(?from, ?base, ?fld, ?inmethod)
<-
   Method:Value(?sig:"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation, ?sig, ?inmethod),
   Tamiflex:ReflectionMap(?fldStr, ?invocation),
   Field:Value(?fld:?fldStr),
   ! Field:Modifier("static", ?fld),
   ActualParam[0, ?invocation] = ?base,
   ActualParam[1, ?invocation] = ?from.

+StoreStaticField(?from, ?fld, ?inmethod)
<-
   Method:Value(?sig:"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"),
   VirtualMethodInvocation(?invocation, ?sig, ?inmethod),
   Tamiflex:ReflectionMap(?fldStr, ?invocation),
   Field:Value(?fld:?fldStr),
   Field:Modifier("static", ?fld),
   ActualParam[1, ?invocation] = ?from.

+Instruction:Value(?heap:?heapStr),
+HeapAllocation(?heap),
+HeapAllocation:Type[?heap] = ?javaField,
+Tamiflex:ReifiedField(?fld, ?heap, ?invocation)
<-
   (Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>") ;
    Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>") ),
   VirtualMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?fldStr, ?invocation),
   Field:Value(?fld:?fldStr),
   ?heapStr = "<(Tamiflex) " + ?fldStr + ">",
   Type:fqn(?javaField:"java.lang.reflect.Field").

+Instruction:Value(?heap:?heapStr),
+HeapAllocation(?heap),
+HeapAllocation:Type[?heap] = ?javaFieldArray,
+Tamiflex:ReifiedFieldArray(?type, ?heap, ?invocation)
<-
   (Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>") ;
    Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Field[] getFields()>") ),
   VirtualMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?typeStr, ?invocation),
   Type:fqn(?type:?typeStr),
   ?heapStr = "<(Tamiflex) " + ?typeStr + "/Field[]>",
   Type:fqn(?javaFieldArray:"java.lang.reflect.Field[]").

+Instruction:Value(?heap:?heapStr),
+HeapAllocation(?heap),
+HeapAllocation:Type[?heap] = ?javaMethod,
+Tamiflex:ReifiedMethod(?method, ?heap, ?invocation)
<-
   (Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>") ;
    Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>") ),
   VirtualMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?methodStr, ?invocation),
   Method:Value(?method:?methodStr),
   ?heapStr = "<(Tamiflex) " + ?methodStr + ">",
   Type:fqn(?javaMethod:"java.lang.reflect.Method").

+Instruction:Value(?heap:?heapStr),
+HeapAllocation(?heap),
+HeapAllocation:Type[?heap] = ?javaMethodArray,
+Tamiflex:ReifiedMethodArray(?type, ?heap, ?invocation)
<-
   (Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>") ;
    Method:Value(?sig:"<java.lang.Class: java.lang.reflect.Method[] getMethods()>") ),
   VirtualMethodInvocation@previous(?invocation, ?sig, _),
   Tamiflex:ReflectionMap(?typeStr, ?invocation),
   Type:fqn(?type:?typeStr),
   ?heapStr = "<(Tamiflex) " + ?typeStr + "/Method[]>",
   Type:fqn(?javaMethodArray:"java.lang.reflect.Method[]").
