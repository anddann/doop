+AssignLocal(?from, ?to, ?method) <- Var:Value(?from:"java.lang.Object.clone/@this"), Var:Value(?to:"java.lang.Object.clone/@native-return"), MethodSignature:Value(?method:"<java.lang.Object: java.lang.Object clone()>").
+StoreStaticField(?l, ?sig, ?m) <- MethodSignature:Value(?m:"<java.lang.System: void setIn0(java.io.InputStream)>"), Var:Value(?l:"java.lang.System.setIn0/@param0"), FieldSignature:Value(?sig:"<java.lang.System: java.io.InputStream in>").
+StoreStaticField(?l, ?sig, ?m) <- MethodSignature:Value(?m:"<java.lang.System: void setOut0(java.io.PrintStream)>"), Var:Value(?l:"java.lang.System.setOut0/@param0"), FieldSignature:Value(?sig:"<java.lang.System: java.io.PrintStream out>").
+StoreStaticField(?l, ?sig, ?m) <- MethodSignature:Value(?m:"<java.lang.System: void setErr0(java.io.PrintStream)>"), Var:Value(?l:"java.lang.System.setErr0/@param0"), FieldSignature:Value(?sig:"<java.lang.System: java.io.PrintStream err>").
+Var(?tmp), +Var:Value(?tmp:?tmpStr), +Var:Type[?tmp] = ?tmpType, +Var:DeclaringMethod(?tmp, ?inmethod),
+LoadArrayIndex(?src, ?tmp, ?inmethod),
+StoreArrayIndex(?tmp, ?dest, ?inmethod)
    <-
      MethodSignature:Value(?arraycopy:"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
      StaticMethodInvocation(?invocation, ?arraycopy, ?inmethod),
      ActualParam@previous[0, ?invocation] = ?src,
      ActualParam@previous[2, ?invocation] = ?dest,
      Instruction:Value(?invocation:?strInvocation), MethodInvocation(?invocation),
      ?tmpStr = ?strInvocation + "/@tmp-arraycopy",
      Type:fqn(?tmpType:"java.lang.Object").
+Instruction:Value(?alloc:"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.io.UnixFileSystem").
+Instruction:Value(?alloc:"java.io.UnixFileSystem.list/new java.lang.String[]"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.String[]").
+Instruction:Value(?alloc:"java.io.UnixFileSystem.list/new java.lang.String"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.String").
+AssignHeapAllocation(?heap, ?return, ?method) <- MethodSignature:Value(?method:"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"), ReturnVar@previous(?return, ?method), Instruction:Value(?heap:"java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem"), HeapAllocation(?heap). +SpecialMethodInvocation:Base[?invocation] = ?return, +Instruction:Method[?invocation] = ?method, +MethodInvocation:Signature[?invocation] = ?constructor, +Instruction:Value(?invocation:?strInvocation), +SpecialMethodInvocation:Insn(?invocation), +Instruction:Index[?invocation] = ?index <- MethodSignature:Value(?method:"<java.io.FileSystem: java.io.FileSystem getFileSystem()>"), ReturnVar@previous(?return, ?method), ?strInvocation = "<java.io.FileSystem: java.io.FileSystem getFileSystem()>" + "/native " + "<java.io.UnixFileSystem: void <init>()>", MethodSignature:Value(?constructor:"<java.io.UnixFileSystem: void <init>()>"), ?index = 1 .
+AssignHeapAllocation(?heap, ?return, ?method) <- MethodSignature:Value(?method:"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), ReturnVar@previous(?return, ?method), Instruction:Value(?heap:"java.io.UnixFileSystem.list/new java.lang.String[]"), HeapAllocation(?heap). +Var(?var), +Var:Value(?var:?strVar), +Var:Type[?var] = ?type, +Var:DeclaringMethod(?var, ?method), +AssignHeapAllocation(?heap, ?var, ?method), +StoreArrayIndex(?var, ?base, ?method) <- MethodSignature:Value(?method:"<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>"), ReturnVar@previous(?base, ?method), ?strVar = "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>" + "/@native-array-element", Type:fqn(?type:"java.lang.String"), Instruction:Value(?heap:"java.io.UnixFileSystem.list/new java.lang.String"), HeapAllocation(?heap).
+Instruction:Value(?invocation:?strInvocation), +VirtualMethodInvocation:Insn(?invocation), +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), +VirtualMethodInvocation:Base[?invocation] = ?base, +Instruction:Method[?invocation] = ?inmethod, +MethodInvocation:Signature[?invocation] = ?signature, +Instruction:Index[?invocation] = ?index <- MethodSignature:Value(?inmethod:"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"), FormalParam@previous[0, ?inmethod] = ?base, ?strInvocation = "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>" + "/native " + "<java.lang.Object: void finalize()>", MethodSignature:Value(?signature:"<java.lang.Object: void finalize()>"), ?index = 1. +Instruction:Value(?invocation:?strInvocation), +MethodInvocation(?invocation), +AssignReturnValue[?invocation] = ?return <- MethodSignature:Value(?inmethod:"<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>"), ReturnVar@previous(?return, ?inmethod), ?strInvocation = "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>" + "/native " + "<java.lang.Object: void finalize()>".
+Instruction:Value(?invocation:?strInvocation), +VirtualMethodInvocation:Insn(?invocation), +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), +VirtualMethodInvocation:Base[?invocation] = ?base, +Instruction:Method[?invocation] = ?inmethod, +MethodInvocation:Signature[?invocation] = ?signature, +Instruction:Index[?invocation] = ?index <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"), FormalParam@previous[0, ?inmethod] = ?base, ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>" + "/native " + "<java.security.PrivilegedAction: java.lang.Object run()>", MethodSignature:Value(?signature:"<java.security.PrivilegedAction: java.lang.Object run()>"), ?index = 1. +Instruction:Value(?invocation:?strInvocation), +MethodInvocation(?invocation), +AssignReturnValue[?invocation] = ?return <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"), ReturnVar@previous(?return, ?inmethod), ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>" + "/native " + "<java.security.PrivilegedAction: java.lang.Object run()>".
+Instruction:Value(?invocation:?strInvocation), +VirtualMethodInvocation:Insn(?invocation), +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), +VirtualMethodInvocation:Base[?invocation] = ?base, +Instruction:Method[?invocation] = ?inmethod, +MethodInvocation:Signature[?invocation] = ?signature, +Instruction:Index[?invocation] = ?index <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"), FormalParam@previous[0, ?inmethod] = ?base, ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>" + "/native " + "<java.security.PrivilegedAction: java.lang.Object run()>", MethodSignature:Value(?signature:"<java.security.PrivilegedAction: java.lang.Object run()>"), ?index = 1. +Instruction:Value(?invocation:?strInvocation), +MethodInvocation(?invocation), +AssignReturnValue[?invocation] = ?return <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>"), ReturnVar@previous(?return, ?inmethod), ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>" + "/native " + "<java.security.PrivilegedAction: java.lang.Object run()>".
+Instruction:Value(?invocation:?strInvocation), +VirtualMethodInvocation:Insn(?invocation), +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), +VirtualMethodInvocation:Base[?invocation] = ?base, +Instruction:Method[?invocation] = ?inmethod, +MethodInvocation:Signature[?invocation] = ?signature, +Instruction:Index[?invocation] = ?index <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"), FormalParam@previous[0, ?inmethod] = ?base, ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>" + "/native " + "<java.security.PrivilegedExceptionAction: java.lang.Object run()>", MethodSignature:Value(?signature:"<java.security.PrivilegedExceptionAction: java.lang.Object run()>"), ?index = 1. +Instruction:Value(?invocation:?strInvocation), +MethodInvocation(?invocation), +AssignReturnValue[?invocation] = ?return <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>"), ReturnVar@previous(?return, ?inmethod), ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>" + "/native " + "<java.security.PrivilegedExceptionAction: java.lang.Object run()>".
+Instruction:Value(?invocation:?strInvocation), +VirtualMethodInvocation:Insn(?invocation), +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), +VirtualMethodInvocation:Base[?invocation] = ?base, +Instruction:Method[?invocation] = ?inmethod, +MethodInvocation:Signature[?invocation] = ?signature, +Instruction:Index[?invocation] = ?index <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"), FormalParam@previous[0, ?inmethod] = ?base, ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>" + "/native " + "<java.security.PrivilegedExceptionAction: java.lang.Object run()>", MethodSignature:Value(?signature:"<java.security.PrivilegedExceptionAction: java.lang.Object run()>"), ?index = 1. +Instruction:Value(?invocation:?strInvocation), +MethodInvocation(?invocation), +AssignReturnValue[?invocation] = ?return <- MethodSignature:Value(?inmethod:"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"), ReturnVar@previous(?return, ?inmethod), ?strInvocation = "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>" + "/native " + "<java.security.PrivilegedExceptionAction: java.lang.Object run()>".
+MainMethodArgsArray(?arrayHeap),
+MainMethodArgHeap(?heap),
+Instruction:Value(?arrayHeap:?arrayHeapStr),
+HeapAllocation(?arrayHeap),
+HeapAllocation:Type[?arrayHeap] = "java.lang.String[]",
+Instruction:Value(?heap:?heapStr),
+HeapAllocation(?heap),
+HeapAllocation:Type[?heap] = "java.lang.String" <-
  ?arrayHeapStr = "<Main Method Arguments Array>",
  ?heapStr = "<Main Method Argument Heap Object>".
+Instruction:Value(?alloc:"<<string-constant>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.String").
+Instruction:Value(?alloc:"<<reflection-string-constant>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.String").
+Instruction:Value(?alloc:"<<string-buffer>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.StringBuffer").
+Instruction:Value(?alloc:"<<string-builder>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.StringBuilder").
+MySystemThreadGroup(?alloc),
  +Instruction:Value(?alloc:"<<system-thread-group>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.ThreadGroup").
+MyMainThreadGroup(?alloc),
  +Instruction:Value(?alloc:"<<main-thread-group>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.ThreadGroup").
+MyMainThread(?alloc),
  +Instruction:Value(?alloc:"<<main-thread>>"), +HeapAllocation(?alloc), +HeapAllocation:Type[?alloc] = ?allocType, +Type(?allocType), +Type:fqn(?allocType:"java.lang.Thread").
