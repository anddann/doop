+java:lang:Object:getClass(?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Object: java.lang.Class getClass()>").

+java:lang:Class:forName(?invocation, ?inmethod) <-
  ( MethodSignature:Value(?sig:"<java.lang.Class: java.lang.Class forName(java.lang.String)>") ;
    MethodSignature:Value(?sig:"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>") ),
  StaticMethodInvocation(?invocation, ?sig, ?inmethod).

+java:lang:Class:getName(?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.String getName()>").

+java:lang:Class:getComponentType(?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.Class getComponentType()>").

+java:lang:Class:getSuperclass(?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.Class getSuperclass()>").

// (YS) Old style: Makes no sense to me. The type should not be there. This is just
// allocating too many useless arrays. Changed it throughout.
/*
+TempDelta(?invocation, ?type, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getInterfaces(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.Class[] getInterfaces()>"),
  ReferenceType(?type),
  ReflectiveArrayMacro(?invocation, ?type, ?arrayType, ?arrayHeapStr, "java.lang.Class[]").
*/
+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getInterfaces(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.Class[] getInterfaces()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.Class[]").

+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getMethods(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Method[] getMethods()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.reflect.Method[]").

+java:lang:Class:getMethod(?to, ?param, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"),
  ActualParam[0, ?invocation] = ?param.

+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getDeclaredMethods(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.reflect.Method[]").

+java:lang:Class:getDeclaredMethod(?to, ?param, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"),
  ActualParam[0, ?invocation] = ?param.

+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getConstructors(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.reflect.Constructor[]").

+java:lang:Class:getConstructor(?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>").

+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getDeclaredConstructors(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.reflect.Constructor[]").

+java:lang:Class:getDeclaredConstructor(?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>").

+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getFields(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Field[] getFields()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.reflect.Field[]").

+java:lang:Class:getField(?to, ?param, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"),
  ActualParam[0, ?invocation] = ?param.

+TempDelta(?invocation, ?arrayType, ?arrayType, ?arrayHeapStr),
+java:lang:Class:getDeclaredFields(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"),
  ReflectiveKnownArrayMacro(?invocation, ?arrayType, ?arrayHeapStr, "java.lang.reflect.Field[]").

+java:lang:Class:getDeclaredField(?to, ?param, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"),
  ActualParam[0, ?invocation] = ?param.

// TODO Better filtering of class types
+TempDelta(?invocation, ?type, ?type, ?heapStr),
+java:lang:Class:newInstance(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.Object newInstance()>"),
  ClassType(?type), Type:fqn(?type:?typeStr),
#ifdef REFINED_REFLECTION_OBJECTS
  Instruction:Value@prev(?invocation:?invocationStr),
  ?heapStr = "<reflective Class.newInstance/" + ?invocationStr + ?typeStr + ">".
#else
// REVIEW: Does this merging lose precision?
  ?heapStr = "<reflective Class.newInstance/" + ?typeStr + ">".
#endif


+TempDelta(?invocation, ?type, ?type, ?heapStr),
+java:lang:Class:getClassLoader(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"),
  // Use a single dummy heap object for any ClassLoader
  Type:fqn(?type:"java.lang.ClassLoader"),
  ?heapStr = "<reflective dummy ClassLoader>".

+TempDelta(?invocation, ?type, ?type, ?heapStr),
+java:lang:ClassLoader:getResource(?invocation, ?to, ?from) <-
  VirtualMethodMacro(?invocation, ?to, ?from, "<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>"),
  // Use a single dummy heap object for any URL resource
  Type:fqn(?type:"java.net.URL"),
  ?heapStr = "<reflective dummy URL resource>".
