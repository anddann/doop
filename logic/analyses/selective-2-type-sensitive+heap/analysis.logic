#include "macros.logic"
#include "../../core/context-sensitivity.logic"

/**
 * Context-sensitive pointer analysis with context of 2 types
 * (AND for static calls 1 call-site).
 *
 * @author George Kastrinis
 */

ClassHasInstr(?class, ?instr) <- MethodSignature:DeclaringType[?method] = ?class, Instruction:Method[?instr] = ?method.
ClassToInstr[?class] = ?instr <- agg<<?instr = min(?otherInstr)>>(ClassHasInstr(?class, ?otherInstr)).

// In this analysis, the real context is a pair of Types AND
// a MethodInvocation (for static calls) sometimes.
// The real heap context is a single Type. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// The type is not always a class type, because of arrays currently being
// a non-class subtype of Object
// NOTE: Changed from HeapAllocation to CallGraphEdgeSource
// in order to use the invocation site for static calls.
ContextFromRealContext[?type1, ?type2] = ?ctx ->
  Context(?ctx), Instruction(?type1), Instruction(?type2).
lang:skolem(`ContextFromRealContext).
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
SpecialContextFromRealContext[?type1, ?invocation, ?type2] = ?ctx ->
  Instruction(?type1), Instruction(?type2),
  CallGraphEdgeSource(?invocation), Context(?ctx). 
lang:skolem(`SpecialContextFromRealContext).
RealContext1FromContext[?ctx] = ?type -> 
  Context(?ctx), Instruction(?type).
RealContext2FromContext[?ctx] = ?type -> 
  Context(?ctx), Instruction(?type).

RealContext1FromContext[?ctx] = ?type1,
RealContext2FromContext[?ctx] = ?type2 <-
  ContextFromRealContext[?type1, ?type2] = ?ctx.
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
RealContext1FromContext[?ctx] = ?invocation,
RealContext2FromContext[?ctx] = ?type2 <- 
  SpecialContextFromRealContext[_, ?invocation, ?type2] = ?ctx.

HContextFromRealHContext[?type] = ?hctx ->
  HContext(?hctx), Instruction(?type).
lang:skolem(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?type -> 
  HContext(?hctx), Instruction(?type).

RealHContextFromHContext[?hctx] = ?type <-
  HContextFromRealHContext[?type] = ?hctx.

HContext(?hctx),
HContextFromRealHContext[?immutable] = ?hctx,
ImmutableHContext[] = ?hctx <-
  // Special immutable constant
  Instruction:Value(?immutable:"<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?type] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?type, ?alloc).

HContextFromRealHContext[?type] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?type, ?alloc).

HContextFromRealHContext[?type] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?type, ?alloc).

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?hctx, ?heap) <-
  MergeBasis(_, _, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContextFromHContext[?hctx], ClassToInstr[DeclaringClass:Allocation[?heap]]] = ?calleeCtx,
OptimizeMerge[?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?heap).


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?type1, ?type2] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  ClassTypeValue(?class1, "java.lang.String"),
  ClassToInstr[?class1] = ?type1,
  Instruction:Value(?type2:"<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?type1, ?type2] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  ClassTypeValue(?class1, "java.lang.String"),
  ClassToInstr[?class1] = ?type1,
  Instruction:Value(?type2:"<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?type1, ?type2] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  ClassTypeValue(?class1, "java.lang.String"),
  ClassToInstr[?class1] = ?type1,
  Instruction:Value(?type2:"<<class-initialization>>").
