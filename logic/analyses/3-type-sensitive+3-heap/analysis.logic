// Context-sensitive pointer analysis with context of 3 types and a
// context-sensitive heap abstraction.

RealContext1FromContext[?ctx] = ?type1,
RealContext2FromContext[?ctx] = ?type2,
RealContext3FromContext[?ctx] = ?type3 <-
  ContextFromRealContext[?type1, ?type2, ?type3] = ?ctx.

RealHContext1FromHContext[?hctx] = ?type1,
RealHContext2FromHContext[?hctx] = ?type2,
RealHContext3FromHContext[?hctx] = ?type3 <-
  HContextFromRealHContext[?type1, ?type2, ?type3] = ?hctx.

Context(?ctx),
ContextFromRealContext[?type, ?type, ?type] = ?ctx,
ImmutableContext[] = ?ctx <-
  Type:fqn(?type, "<<immutable-context>>").

HContext(?hctx),
HContextFromRealHContext[?type, ?type, ?type] = ?hctx,
ImmutableHContext[] = ?hctx <-
  Type:fqn(?type, "<<immutable-hcontext>>").


// Create initial objects with their heap contexts
HContext(?hctx),
HContextFromRealHContext[?type, ?type, ?type] = ?hctx,
SystemThreadGroup(?hctx, ?alloc) <-
  Type:fqn(?type, "<<jvm-startup>>"),
  HeapAllocationValue(?alloc, "<<system-thread-group>>").

HContext(?hctx),
HContextFromRealHContext[?type, ?type, ?type] = ?hctx,
MainThreadGroup(?hctx, ?alloc) <-
  Type:fqn(?type, "<<jvm-startup>>"),
  HeapAllocationValue(?alloc, "<<main-thread-group>>").

HContext(?hctx),
HContextFromRealHContext[?type, ?type, ?type] = ?hctx,
MainThread(?hctx, ?alloc) <-
  Type:fqn(?type, "<<jvm-startup>>"),
  HeapAllocationValue(?alloc, "<<main-thread>>").


// Merge optimization hack

// For this analysis, we only need two of the parameters that may influence the
// new context object.
MyMergeBasis(?hctx, ?heap) <-
  MergeBasis(_, _, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.  We also
// cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContext2FromHContext[?hctx],
                       RealHContext3FromHContext[?hctx],
                       DeclaringClass:Allocation[?heap]] = ?calleeCtx,
OptimizeMerge[?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?heap).


// Initially reachable methods
Context(?ctx),
ContextFromRealContext[?type12, ?type12, ?type3] = ?ctx,
ReachableContext(?ctx, ?method) <-
  MainMethodDeclaration(?method),
  Type:fqn(?type12:"<<initial-context>>"),
  ClassTypeValue(?type3, "java.lang.String").

Context(?ctx),
ContextFromRealContext[?type12, ?type12, ?type3] = ?ctx,
ReachableContext(?ctx, ?method) <-
  ImplicitReachable(?method),
  Type:fqn(?type12:"<<jvm-startup>>"),
  ClassTypeValue(?type3, "java.lang.String").

Context(?ctx),
ContextFromRealContext[?type12, ?type12, ?type3] = ?ctx,
ReachableContext(?ctx, ?clinit) <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  Type:fqn(?type12:"<<class-initialization>>"),
  ClassTypeValue(?type3, "java.lang.String").
