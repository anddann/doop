// Context-sensitive pointer analysis with context of 1 object and 1 call-site.

RealContext1FromContext[?ctx] = ?heap,
RealContext2FromContext[?ctx] = ?invocation <-
  ContextFromRealContext[?heap, ?invocation] = ?ctx.

ImmutableInvValue[] = ?invo <-
  MethodInvocationValue(?invo, "<<immutable-context-2>>").

Context(?ctx),
ContextFromRealContext[?heap, ?invo] = ?ctx,
ImmutableContext[] = ?ctx <-
  HeapAllocationValue(?heap, "<<immutable-context>>"),
  MethodInvocationValue(?invo, "<<immutable-context-2>>").

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
ImmutableHContext[] = ?hctx.


// Create initial objects with their heap contexts
HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
SystemThreadGroup(?hctx, ?alloc) <-
  HeapAllocationValue(?alloc, "<<system-thread-group>>").

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
MainThreadGroup(?hctx, ?alloc) <-
  HeapAllocationValue(?alloc, "<<main-thread-group>>").

HContext(?hctx),
HContextFromRealHContext[] = ?hctx,
MainThread(?hctx, ?alloc) <-
  HeapAllocationValue(?alloc, "<<main-thread>>").


// Merge optimization hack

// For this analysis, we only need two of the parameters that may influence the
// new context object.
//MyMergeBasis(?heap, ?invocation) <-
//  MergeBasis(_, _, ?heap, ?invocation).

// We create new context objects sparingly, because of the high cost.  We also
// cache them, so they can be looked up without a join.
//Context(?calleeCtx),
//ContextFromRealContext[?heap, ?invocation] = ?calleeCtx,
//OptimizeMerge[?heap, ?invocation] = ?calleeCtx <-
//  MyMergeBasis(?heap, ?invocation).


// Initially reachable methods
Context(?ctx),
ContextFromRealContext[?heap, ?invo] = ?ctx,
ReachableContext(?ctx, ?method) <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?heap, "<<initial-context>>"),
  MethodInvocationValue(?invo, "<<initial-context-2>>").

Context(?ctx),
ContextFromRealContext[?heap, ?invo] = ?ctx,
ReachableContext(?ctx, ?method) <-
  ImplicitReachable(?method),
  HeapAllocationValue(?heap, "<<jvm-startup>>"),
  MethodInvocationValue(?invo, "<<jvm-startup-2>>").

Context(?ctx),
ContextFromRealContext[?heap, ?invo] = ?ctx,
ReachableContext(?ctx, ?clinit) <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?heap, "<<class-initialization>>"),
  MethodInvocationValue(?invo, "<<class-initialization-2>>").
